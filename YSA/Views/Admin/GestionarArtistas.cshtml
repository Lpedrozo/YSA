@model List<YSA.Web.Models.ViewModels.ArtistaListViewModel>
@{
    ViewData["Title"] = "Gestión de Artistas";
}

<style>
    /* ------------------------------------- */
    /* 1. Variables B&W y Estilos Generales  */
    /* ------------------------------------- */
    :root {
        --color-secondary: #000000; /* Negro Puro (Título) */
        --color-primary: #333333; /* Gris Oscuro (Botones, Acentos) */
        --color-secondary-light: #5a5a5a; /* Gris Medio */
        --color-text-muted: #6a6a6a; /* Gris medio (Descripción) */
        --color-background-white: #ffffff; /* Fondo para las tarjetas */
        --color-border-light: #e0e0e0; /* Borde sutil */
        --color-danger: #cc0000; /* Rojo sutil para acciones peligrosas */
    }

    h1 {
        color: var(--color-secondary);
        font-weight: 700;
        font-size: 2rem;
    }

    .btn-success {
        background-color: var(--color-primary) !important;
        border-color: var(--color-primary) !important;
        color: white !important;
        font-weight: 600;
        transition: background-color 0.2s;
        border-radius: 8px;
    }

        .btn-success:hover {
            background-color: var(--color-secondary) !important;
            border-color: var(--color-secondary) !important;
        }

    /* Botones de acción compactos (Editar/Eliminar) */
    .btn-primary, .btn-danger {
        width: 70px;
        height: 36px;
        padding: 0;
        display: inline-flex;
        justify-content: center;
        align-items: center;
        flex-shrink: 0;
        border-radius: 6px;
        color: white; /* Asegura el color del icono */
    }

    .btn-primary {
        background-color: var(--color-primary) !important;
        border-color: var(--color-primary) !important;
    }

    .btn-danger {
        background-color: var(--color-danger) !important;
        border-color: var(--color-danger) !important;
    }

    .btn-primary:hover {
        background-color: var(--color-secondary) !important;
    }

    .btn-danger:hover {
        background-color: #a30000 !important;
    }

    /* -------------------------- */
    /* 2. Estilos de Cards        */
    /* -------------------------- */
    .artist-card {
        border: 1px solid var(--color-border-light);
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        transition: transform 0.2s, box-shadow 0.2s;
        margin-bottom: 20px;
        background-color: var(--color-background-white);
    }

        .artist-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

    .profile-img-card {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        object-fit: cover;
        border: 3px solid var(--color-border-light);
    }

    .artist-info-group {
        /* Fuerza la columna en móviles */
        display: flex;
        align-items: center;
    }

    .artist-name-title {
        color: var(--color-secondary);
        font-weight: 600;
        font-size: 1.25rem;
        margin-bottom: 0;
    }

    .artist-info-detail {
        font-size: 0.9rem;
        color: var(--color-text-muted);
        margin-bottom: 4px;
        display: flex;
        align-items: center;
    }

        .artist-info-detail i {
            width: 20px;
            color: var(--color-primary);
            font-size: 0.8rem;
        }

    .modal-dialog {
        max-width: 600px;
    }

    /* ------------------------------------- */
    /* 3. MEDIA QUERY RESPONSIVE (MÓVIL)     */
    /* ------------------------------------- */
    @@media (max-width: 767.98px) { /* Extra Small a Small devices */

        .container.mt-5 {
            margin-top: 1.5rem !important;
        }
        /* Fuerza la tarjeta a ocupar todo el ancho en móvil */
        .col-lg-6 {
            width: 100%;
        }
        /* Centra el botón principal y le da ancho completo */
        .d-flex.justify-content-end.mb-4 {
            justify-content: center !important;
        }

        .btn-success {
            width: 100%;
            max-width: 300px;
            font-size: 1.1rem;
            padding: 0.5rem 1rem;
        }
        /* Reorganiza la card para que la imagen y el texto se apilen */
        .artist-card .d-flex.align-items-center {
            flex-direction: column; /* Apila imagen y texto */
            text-align: center;
        }

        .artist-card .me-4.flex-shrink-0 {
            margin-right: 0 !important;
            margin-bottom: 10px; /* Espacio entre imagen y texto */
        }

        .artist-card .flex-grow-1 {
            width: 100%;
            margin-bottom: 10px;
        }

        .artist-info-detail {
            /* Centra los detalles y hace que se vean mejor apilados */
            justify-content: center;
        }
        /* Mueve los botones de acción debajo del texto principal */
        .artist-card .d-flex.flex-column.align-items-center.ms-auto {
            flex-direction: row !important; /* Vuelve los botones a línea horizontal */
            justify-content: center;
            width: 100%;
            margin-top: 10px;
            margin-left: 0 !important;
        }

        .btn-primary, .btn-danger {
            width: 70px;
            height: 45px;
            margin: 0 5px;
        }
    }
</style>

<div class="container mt-5 mb-5 pb-5">
    <h1 class="text-center mb-4">Gestión de Artistas</h1>
    <hr style="border-top: 2px solid var(--color-border-light); opacity: 1;" />

    <div class="d-flex justify-content-end mb-4">
        <button type="button" class="btn btn-success btn-lg" data-bs-toggle="modal" data-bs-target="#crearArtistaModal">
            <i class="fas fa-plus-circle me-2"></i> Nuevo Artista
        </button>
    </div>

    <div class="row pb-5 mb-5" id="contenedorArtistas">
        @if (Model != null && Model.Any())
        {
            @foreach (var artista in Model)
            {
                <div class="col-lg-6">
                    <div class="card artist-card p-3">
                        <div class="d-flex align-items-center">
                            <div class="me-4 flex-shrink-0">
                                <img src="@(string.IsNullOrEmpty(artista.UrlImagen) ? "/images/default-avatar.png" : artista.UrlImagen)"
                                     class="profile-img-card" alt="Foto de Perfil" />
                            </div>

                            <div class="flex-grow-1">
                                <p class="artist-name-title">@artista.NombreArtistico</p>
                                <p class="text-muted small mb-2">@artista.NombreCompleto</p>

                                <div class="artist-info-detail">
                                    <i class="fas fa-envelope me-2"></i> @artista.Email
                                </div>
                                <div class="artist-info-detail">
                                    <i class="fas fa-palette me-2"></i> @artista.EstiloPrincipal
                                </div>
                            </div>

                            <div class="d-flex flex-column align-items-center ms-auto">
                                <button type="button" class="btn btn-sm btn-primary editar-btn mb-2"
                                        data-bs-toggle="modal"
                                        data-bs-target="#editarArtistaModal"
                                        data-id="@artista.Id"
                                        data-usuarioid="@artista.UsuarioId"
                                        data-nombre="@artista.NombreCompleto.Split(' ')[0]"
                                        data-apellido="@(artista.NombreCompleto.Split(' ').Length > 1 ? artista.NombreCompleto.Split(' ')[1] : "")"
                                        data-email="@artista.Email"
                                        data-nombreartistico="@artista.NombreArtistico"
                                        data-estiloprincipal="@artista.EstiloPrincipal"
                                        data-urlimagen="@artista.UrlImagen" title="Editar">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <form asp-action="DeleteArtista" asp-route-id="@artista.Id" method="post" class="d-inline eliminar-form">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-sm btn-danger eliminar-btn" title="Eliminar">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <div class="alert alert-info text-center" role="alert" style="border-radius: 8px;">
                    No hay artistas registrados.
                </div>
            </div>
        }
    </div>
</div>

<div class="modal fade" id="crearArtistaModal" tabindex="-1" aria-labelledby="crearArtistaModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="crearArtistaModalLabel" style="color:var(--color-secondary);">Crear Nuevo Artista</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="formCrearArtista" asp-action="CrearArtista" method="post" enctype="multipart/form-data">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <label for="Crear_Nombre" style="color:var(--color-primary);">Nombre</label>
                        <input type="text" id="Crear_Nombre" name="Nombre" class="form-control" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Crear_Apellido" style="color:var(--color-primary);">Apellido</label>
                        <input type="text" id="Crear_Apellido" name="Apellido" class="form-control" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Crear_Email" style="color:var(--color-primary);">Correo Electrónico</label>
                        <input type="email" id="Crear_Email" name="Email" class="form-control" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Crear_Password" style="color:var(--color-primary);">Contraseña</label>
                        <input type="password" id="Crear_Password" name="Password" class="form-control" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Crear_NombreArtistico" style="color:var(--color-primary);">Nombre Artístico</label>
                        <input type="text" id="Crear_NombreArtistico" name="NombreArtistico" class="form-control" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Crear_Biografia" style="color:var(--color-primary);">Biografía</label>
                        <textarea id="Crear_Biografia" name="Biografia" class="form-control" rows="5"></textarea>
                    </div>
                    <div class="form-group mb-3">
                        <label for="Crear_EstiloPrincipal" style="color:var(--color-primary);">Estilo Principal</label>
                        <input type="text" id="Crear_EstiloPrincipal" name="EstiloPrincipal" class="form-control" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Crear_ImagenPerfil" style="color:var(--color-primary);">Imagen de Perfil</label>
                        <input type="file" id="Crear_ImagenPerfil" name="ImagenPerfil" class="form-control" accept=".jpg,.jpeg,.png" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Guardar</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="editarArtistaModal" tabindex="-1" aria-labelledby="editarArtistaModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editarArtistaModalLabel" style="color:var(--color-secondary);">Editar Artista</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="formEditarArtista" asp-action="UpdateArtista" method="post" enctype="multipart/form-data">
                @Html.AntiForgeryToken()
                <input type="hidden" id="Editar_Id" name="Id" />
                <input type="hidden" id="Editar_UsuarioId" name="UsuarioId" />
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <label for="Editar_Nombre" style="color:var(--color-primary);">Nombre</label>
                        <input type="text" id="Editar_Nombre" name="Nombre" class="form-control" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Editar_Apellido" style="color:var(--color-primary);">Apellido</label>
                        <input type="text" id="Editar_Apellido" name="Apellido" class="form-control" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Editar_Email" style="color:var(--color-primary);">Correo Electrónico</label>
                        <input type="email" id="Editar_Email" name="Email" class="form-control" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Editar_Password" style="color:var(--color-primary);">Nueva Contraseña</label>
                        <input type="password" id="Editar_Password" name="Password" class="form-control" placeholder="Dejar vacío para no cambiar" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Editar_NombreArtistico" style="color:var(--color-primary);">Nombre Artístico</label>
                        <input type="text" id="Editar_NombreArtistico" name="NombreArtistico" class="form-control" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Editar_Biografia" style="color:var(--color-primary);">Biografía</label>
                        <textarea id="Editar_Biografia" name="Biografia" class="form-control" rows="5"></textarea>
                    </div>
                    <div class="form-group mb-3">
                        <label for="Editar_EstiloPrincipal" style="color:var(--color-primary);">Estilo Principal</label>
                        <input type="text" id="Editar_EstiloPrincipal" name="EstiloPrincipal" class="form-control" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Editar_ImagenPerfil" style="color:var(--color-primary);">Imagen de Perfil</label>
                        <input type="file" id="Editar_ImagenPerfil" name="ImagenPerfil" class="form-control" accept=".jpg,.jpeg,.png" />
                        <small class="form-text text-muted">Dejar vacío para conservar la imagen actual.</small>
                        <img id="Editar_PreviewImagen" src="" class="img-thumbnail mt-2 profile-img-card" style="display: none;" alt="Imagen actual del artista" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Guardar</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function getAntiForgeryToken() {
            const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenElement ? tokenElement.value : '';
        }

        async function recargarContenedor() {
            try {
                // Carga la página completa
                const response = await fetch('@Url.Action("GestionarArtistas", "Admin")');
                if (!response.ok) {
                    throw new Error('No se pudieron cargar los artistas.');
                }
                const html = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');

                // Reemplaza el contenido del contenedor de cards
                const newContainerContent = doc.getElementById('contenedorArtistas')?.outerHTML || '';
                const oldContainer = document.getElementById('contenedorArtistas');

                if (oldContainer) {
                    oldContainer.outerHTML = newContainerContent;
                } else {
                    // Si el contenedor no existe, recarga para asegurar el renderizado
                    window.location.reload();
                    return;
                }

                attachEventListeners(); // Re-adjunta los eventos a los nuevos botones
            } catch (error) {
                Swal.fire('Error', error.message, 'error');
            }
        }

        function attachEventListeners() {
            // Re-adjunta los listeners para los botones de eliminar
            document.querySelectorAll('.eliminar-btn').forEach(button => {
                // Es buena práctica remover el listener antes de adjuntar para evitar duplicados
                button.removeEventListener('click', handleEliminarClick);
                button.addEventListener('click', handleEliminarClick);
            });

            // Re-adjunta los listeners para los botones de editar (carga de datos)
            document.querySelectorAll('.editar-btn').forEach(button => {
                button.removeEventListener('click', handleEditarClick);
                button.addEventListener('click', handleEditarClick);
            });
        }

        function handleEliminarClick(e) {
            e.preventDefault();
            const form = this.closest('form');
            Swal.fire({
                title: '¿Estás seguro?',
                text: "¡No podrás revertir esto!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#6a6a6a',
                confirmButtonText: 'Sí, ¡bórralo!',
                cancelButtonText: 'Cancelar'
            }).then(async (result) => {
                if (result.isConfirmed) {
                    const formData = new FormData(form);
                    formData.append('__RequestVerificationToken', getAntiForgeryToken());

                    // Nota: Aquí se asume que tu controlador DeleteArtista espera un FormData.
                    // Si solo espera el ID de la ruta, puedes usar:
                    // const url = form.action;
                    // const response = await fetch(url, { method: 'POST', headers: { 'RequestVerificationToken': getAntiForgeryToken() }});

                    const response = await fetch(form.action, { method: 'POST', body: formData });
                    const result = await response.json();
                    if (result.success) {
                        Swal.fire('Eliminado!', result.message, 'success');
                        await recargarContenedor();
                    } else {
                        Swal.fire('Error', result.message, 'error');
                    }
                }
            });
        }

        function handleEditarClick() {
            const id = this.getAttribute('data-id');
            const usuarioId = this.getAttribute('data-usuarioid');
            const nombre = this.getAttribute('data-nombre');
            const apellido = this.getAttribute('data-apellido');
            const email = this.getAttribute('data-email');
            const nombreArtistico = this.getAttribute('data-nombreartistico');
            const estiloPrincipal = this.getAttribute('data-estiloprincipal');
            const urlImagen = this.getAttribute('data-urlimagen');

            // Asume que el campo Biografía no se pasa por data-attribute (limitación de longitud),
            // por lo que debe cargarse por separado si es necesario. Por ahora, lo limpiamos o dejamos lo que tenía.
            // Si la Biografía es un campo importante, considera obtenerla por AJAX al hacer clic.
            // const biografia = this.getAttribute('data-biografia'); // Si la incluyes
            // document.getElementById('Editar_Biografia').value = biografia;

            // Asignación de valores
            document.getElementById('Editar_Id').value = id;
            document.getElementById('Editar_UsuarioId').value = usuarioId;
            document.getElementById('Editar_Nombre').value = nombre;
            document.getElementById('Editar_Apellido').value = apellido;
            document.getElementById('Editar_Email').value = email;
            document.getElementById('Editar_NombreArtistico').value = nombreArtistico;
            document.getElementById('Editar_EstiloPrincipal').value = estiloPrincipal;
            document.getElementById('Editar_Password').value = ''; // Limpia el campo de contraseña
            // Si no obtuviste la biografía, la dejamos como está o la limpiamos. En este caso, la dejaremos en blanco por precaución.
            // document.getElementById('Editar_Biografia').value = '';


            const previewImg = document.getElementById('Editar_PreviewImagen');
            if (urlImagen && urlImagen !== 'null' && urlImagen !== '/images/default-avatar.png') {
                previewImg.src = urlImagen;
                previewImg.style.display = 'block';
            } else {
                // Usar la imagen por defecto si la URL está vacía o es la URL por defecto
                previewImg.src = '/images/default-avatar.png';
                previewImg.style.display = 'block';
            }
        }


        document.addEventListener('DOMContentLoaded', function () {
            attachEventListeners(); // Adjunta eventos iniciales

            document.getElementById('formCrearArtista').addEventListener('submit', async function (e) {
                e.preventDefault();
                const formData = new FormData(this);
                const response = await fetch(this.action, {
                    method: 'POST',
                    body: formData
                });
                const result = await response.json();
                if (result.success) {
                    Swal.fire('Éxito', result.message, 'success');
                    // Usar Bootstrap 5 para cerrar el modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('crearArtistaModal'));
                    if(modal) modal.hide();
                    this.reset();
                    await recargarContenedor();
                } else {
                    const errorMsg = result.message || 'Hubo un error al crear el artista.';
                    Swal.fire('Error', errorMsg, 'error');
                }
            });

            document.getElementById('formEditarArtista').addEventListener('submit', async function (e) {
                e.preventDefault();
                const formData = new FormData(this);
                const response = await fetch(this.action, {
                    method: 'POST',
                    body: formData
                });
                const result = await response.json();
                if (result.success) {
                    Swal.fire('Éxito', result.message, 'success');
                    // Usar Bootstrap 5 para cerrar el modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editarArtistaModal'));
                    if(modal) modal.hide();
                    await recargarContenedor();
                } else {
                    const errorMsg = result.message || 'Hubo un error al actualizar el artista.';
                    Swal.fire('Error', errorMsg, 'error');
                }
            });
        });
    </script>
}