@model List<YSA.Web.Models.ViewModels.RecursoActividadViewModel>
@{
    // Valores pasados desde el controlador
    string tipoEntidad = ViewBag.TipoEntidad;
    int entidadId = ViewBag.EntidadId;
    string entidadNombre = ViewBag.EntidadNombre;
    int cursoId = ViewBag.CursoId;
    var tiposRecurso = ViewBag.TiposRecurso as SelectList; // Opciones para el dropdown

    ViewData["Title"] = $"Gestión de Recursos/Actividades para {tipoEntidad} - {entidadNombre}";
}

<style>
    /* Estilos para que el modal sea más grande y TinyMCE quepa */
    #crearRecursoModal .modal-dialog,
    #editarRecursoModal .modal-dialog {
        max-width: 800px; /* Ancho para el editor */
    }
</style>

<div class="container mt-5 mb-5 pb-5">

    <h1>Recursos y actividades para: @entidadNombre</h1>
    <p class="text-muted">Añade contenido interactivo o de apoyo a este @tipoEntidad.</p>

    <div class="d-flex flex-wrap justify-content-start align-items-center mb-4">
        @if (tipoEntidad == "Curso")
        {
            <a asp-action="GestionarCursos" class="btn btn-secondary me-3 mb-2">
                <i class="fas fa-arrow-left me-2"></i> Volver a cursos
            </a>
        }
        @if (tipoEntidad == "Modulo")
        {
            <a asp-action="GestionarModulos" asp-route-cursoId="@cursoId" class="btn btn-secondary me-3 mb-2">
                <i class="fas fa-arrow-left me-2"></i> Volver a módulos
            </a>
        }
        @if (tipoEntidad == "Leccion")
        {
            <button type="button" onclick="history.back()" class="btn btn-secondary me-3 mb-2">
                <i class="fas fa-arrow-left me-2"></i> Volver atrás
            </button>
        }

        <button type="button" class="btn btn-success mb-2" data-bs-toggle="modal" data-bs-target="#crearRecursoModal">
            <i class="fas fa-plus-circle me-2"></i> Nuevo recurso/actividad
        </button>
    </div>
    <hr />

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">@TempData["SuccessMessage"]</div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
    }

    @if (Model == null || !Model.Any())
    {
        <div class="alert alert-info text-center" role="alert">
            No hay recursos o actividades. ¡Crea el primer elemento!
        </div>
    }
    else
    {
        <div class="alert alert-light">Total de recursos/actividades: @Model.Count</div>

        <div id="lista-recursos" class="list-group mb-5 pb-5">
            @foreach (var recurso in Model.OrderBy(r => r.Id))
            {
                <div class="list-group-item list-group-item-action d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-3 shadow-sm"
                     data-id="@recurso.Id">

                    <div class="d-flex align-items-start align-items-md-center mb-2 mb-md-0 w-100 w-md-75">
                        <i class="fas fa-arrows-alt handle me-3 text-muted flex-shrink-0" title="Arrastrar para reordenar"></i>

                        <div class="flex-grow-1 overflow-hidden">
                            <h5 class="mb-1 text-truncate">@recurso.Titulo</h5>
                            <small class="text-muted d-block mb-1">
                                Tipo: <strong>@recurso.TipoRecurso</strong>
                                @if (recurso.RequiereEntrega)
                                {
                                    <span class="badge bg-warning text-dark ms-2">Requiere entrega</span>
                                }
                            </small>
                            @if (!string.IsNullOrWhiteSpace(recurso.Url))
                            {
                                <p class="mb-0 text-truncate" style="max-width: 100%;">
                                    URL: <a href="@recurso.Url" target="_blank">@recurso.Url</a>
                                </p>
                            }
                        </div>
                    </div>

                    <div class="btn-group flex-shrink-0 ms-md-auto" role="group">
                        <button type="button" class="btn btn-sm btn-info btn-editar-recurso"
                                data-id="@recurso.Id" title="Editar">
                            <i class="fas fa-edit"></i> <span class="d-inline d-md-none">Editar</span>
                        </button>
                        <button type="button" class="btn btn-sm btn-danger btn-eliminar-recurso"
                                data-id="@recurso.Id" title="Eliminar">
                            <i class="fas fa-trash"></i> <span class="d-inline d-md-none">Eliminar</span>
                        </button>
                    </div>
                </div>
            }
        </div>
    }

</div>

<div class="modal fade" id="crearRecursoModal" tabindex="-1" aria-labelledby="crearRecursoModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="crearRecursoModalLabel">Crear nuevo recurso o actividad</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="formCrearRecurso" asp-action="CrearRecursoActividad" method="post" enctype="multipart/form-data" novalidate>
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div id="crear-recurso-validation-errors" class="alert alert-danger d-none"></div>

                    <input type="hidden" name="TipoEntidad" value="@tipoEntidad" />
                    <input type="hidden" name="EntidadId" value="@entidadId" />

                    <div class="form-group mb-3">
                        <label for="Crear_Titulo">Título del recurso/actividad</label>
                        <input type="text" id="Crear_Titulo" name="Titulo" class="form-control" required maxlength="255" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="Crear_TipoRecurso">Tipo de recurso</label>
                        <select id="Crear_TipoRecurso" name="TipoRecurso" class="form-select" required>
                            <option value="" disabled selected>-- Seleccione tipo --</option>
                            @foreach (var item in tiposRecurso)
                            {
                                <option value="@item.Text">@item.Text</option>
                            }
                        </select>
                    </div>

                    <div id="seccion-url-archivo">
                        <div class="form-group mb-3">
                            <label for="Crear_Url">URL o enlace externo (si aplica)</label>
                            <input type="url" id="Crear_Url" name="Url" class="form-control" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="Crear_Archivo">Subir archivo (PDF, ZIP, etc.)</label>
                            <input type="file" id="Crear_Archivo" name="Archivo" class="form-control" accept=".pdf,.doc,.docx,.zip,.rar" />
                            <small class="form-text text-muted">Deja vacío si usas un Enlace/URL.</small>
                        </div>
                    </div>

                    <div class="form-group mb-3">
                        <label for="Crear_Descripcion">Descripción (Opcional)</label>
                        <textarea id="Crear_Descripcion" name="Descripcion" class="form-control tinymce-descripcion" rows="5"></textarea>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" id="Crear_RequiereEntrega" name="RequiereEntrega" class="form-check-input" value="true">
                        <label class="form-check-label" for="Crear_RequiereEntrega">Requiere entrega del estudiante (Marcar para actividades evaluables)</label>
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-success" id="btnGuardarRecurso">Guardar Recurso</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="editarRecursoModal" tabindex="-1" aria-labelledby="editarRecursoModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editarRecursoModalLabel">Editar recurso o actividad</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="formEditarRecurso" asp-action="EditarRecursoActividad" method="post" enctype="multipart/form-data" novalidate>
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div id="editar-recurso-validation-errors" class="alert alert-danger d-none"></div>

                    <input type="hidden" id="Editar_Id" name="Id" value="" />
                    <input type="hidden" id="Editar_TipoEntidad" name="TipoEntidad" value="" />
                    <input type="hidden" id="Editar_EntidadId" name="EntidadId" value="" />

                    <div class="form-group mb-3">
                        <label for="Editar_Titulo">Título del recurso/actividad</label>
                        <input type="text" id="Editar_Titulo" name="Titulo" class="form-control" required maxlength="255" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="Editar_TipoRecurso">Tipo de Recurso</label>
                        <select id="Editar_TipoRecurso" name="TipoRecurso" class="form-select" required>
                            <option value="" disabled selected>-- Seleccione ripo --</option>
                            @foreach (var item in tiposRecurso)
                            {
                                <option value="@item.Text">@item.Text</option>
                            }
                        </select>
                    </div>

                    <div id="seccion-url-archivo-editar">
                        <div class="form-group mb-3">
                            <label for="Editar_Url">URL o enlace externo (si aplica)</label>
                            <input type="text" id="Editar_Url" name="Url" class="form-control" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="Editar_Archivo">Reemplazar archivo</label>
                            <input type="file" id="Editar_Archivo" name="Archivo" class="form-control" accept=".pdf,.doc,.docx,.zip,.rar" />
                            <small class="form-text text-muted">Subir un nuevo archivo reemplazará el actual.</small>
                        </div>
                    </div>

                    <div class="form-group mb-3">
                        <label for="Editar_Descripcion">Descripción (Opcional)</label>
                        <textarea id="Editar_Descripcion" name="Descripcion" class="form-control tinymce-descripcion" rows="5"></textarea>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" id="Editar_RequiereEntrega" name="RequiereEntrega" class="form-check-input" value="true">
                        <label class="form-check-label" for="Editar_RequiereEntrega">Requiere entrega del estudiante</label>
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary" id="btnGuardarEdicion">Guardar cambios</button>
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.2/Sortable.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.tiny.cloud/1/72k2eqfy02quriyevi4t2ctxtg50ucyx8gngemudhw0tyn9w/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>

    <script>
        // Función clave para permitir que TinyMCE funcione dentro de un modal de Bootstrap (problema de foco)
        function tinymceModalSetup(editor) {
            editor.on('init', function() {
                // Cuando el modal de Bootstrap se muestra:
                $(editor.getContainer()).parents('.modal').on('shown.bs.modal', function () {
                    editor.focus();
                });
            });
        }

        // Función para inicializar o re-inicializar el editor
        function initTinyMCE(selector, content = '') {
            var editorId = selector.replace('#', '');

            // 1. Si existe una instancia de TinyMCE para ese ID, la destruimos.
            if (tinymce.get(editorId)) {
                tinymce.get(editorId).remove();
            }

            // 2. Inicializamos una nueva instancia.
            tinymce.init({
                selector: selector,
                plugins: 'advlist autolink lists link image charmap preview anchor searchreplace visualblocks code fullscreen insertdatetime media table help wordcount',
                toolbar: 'undo redo | formatselect | bold italic backcolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | help',
                height: 300,
                setup: function (editor) {
                    tinymceModalSetup(editor); // Aplicar la corrección de foco
                    editor.on('init', function (e) {
                        // Establecer el contenido SÓLO después de que el editor se haya inicializado
                        if (content) {
                            editor.setContent(content);
                        } else {
                            editor.setContent('');
                        }
                    });
                }
            });
        }

        document.addEventListener('DOMContentLoaded', function () {

            // --- Inicialización de TinyMCE al cargar la página ---
            initTinyMCE('#Crear_Descripcion');

            // --- Referencias a Elementos ---
            const crearForm = document.getElementById('formCrearRecurso');
            const btnGuardarCrear = document.getElementById('btnGuardarRecurso');
            const tipoRecursoSelectCrear = document.getElementById('Crear_TipoRecurso');
            const seccionUrlArchivoCrear = document.getElementById('seccion-url-archivo');
            const requiereEntregaCheckboxCrear = document.getElementById('Crear_RequiereEntrega');

            const editarForm = document.getElementById('formEditarRecurso');
            const btnGuardarEdicion = document.getElementById('btnGuardarEdicion');
            const tipoRecursoSelectEditar = document.getElementById('Editar_TipoRecurso');
            const seccionUrlArchivoEditar = document.getElementById('seccion-url-archivo-editar');
            const requiereEntregaCheckboxEditar = document.getElementById('Editar_RequiereEntrega');

            const controladorName = "Admin"; // Ajusta esto al nombre real de tu controlador

            // --- Utilidades ---

            function getAntiForgeryToken() {
                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                return tokenElement ? tokenElement.value : '';
            }

            function displayErrors(errorDivId, errors) {
                const errorDiv = document.getElementById(errorDivId);
                errorDiv.innerHTML = '';
                errorDiv.classList.add('d-none');

                const errorList = [];
                const errorSource = errors.errors || errors; // Si viene del servidor, 'errors' puede estar anidado

                if (typeof errorSource === 'object' && errorSource !== null) {
                    for (const key in errorSource) {
                        if (errorSource.hasOwnProperty(key) && Array.isArray(errorSource[key])) {
                            errorSource[key].forEach(error => {
                                // Intenta hacer el nombre de campo más legible
                                const fieldName = key.includes('.') ? key.split('.').pop() : key;
                                errorList.push(`<div><strong>${fieldName}:</strong> ${error}</div>`);
                            });
                        } else if (key === 'message') {
                            errorList.push(`<div>${errorSource[key]}</div>`);
                        }
                    }
                } else if (typeof errors.message === 'string') {
                    errorList.push(`<div>${errors.message}</div>`);
                } else if (typeof errors === 'string') {
                    errorList.push(`<div>${errors}</div>`);
                }

                if (errorList.length > 0) {
                    errorDiv.innerHTML = errorList.join('');
                    errorDiv.classList.remove('d-none');
                }
            }

            function setupTipoRecursoLogic(selectElement, urlArchivoSection, requiereEntregaCheckbox) {
                const updateVisibility = () => {
                    const selectedValue = selectElement.value;
                    const isActivity = selectedValue === "Actividad";

                    urlArchivoSection.style.display = isActivity ? 'none' : 'block';

                    const entregaContainer = requiereEntregaCheckbox.closest('.form-check');
                    // Muestra/Oculta la opción de Requiere Entrega (generalmente solo para Actividad)
                    if (isActivity) {
                        entregaContainer.style.display = 'block';
                    } else {
                        entregaContainer.style.display = 'none';
                        // Desmarca si se cambia de tipo, ya que no aplica
                        requiereEntregaCheckbox.checked = false;
                    }
                };

                selectElement.addEventListener('change', updateVisibility);
                updateVisibility(); // Llamar al cargar para establecer el estado inicial
            }

            // --- 1. Lógica de UI (Creación y Edición) ---
            setupTipoRecursoLogic(tipoRecursoSelectCrear, seccionUrlArchivoCrear, requiereEntregaCheckboxCrear);
            setupTipoRecursoLogic(tipoRecursoSelectEditar, seccionUrlArchivoEditar, requiereEntregaCheckboxEditar);


            // --- 2. Funciones CRUD Asíncronas ---

            // A. CREAR RECURSO
            crearForm.addEventListener('submit', async function (e) {
                e.preventDefault();

                // Asegúrate de que TinyMCE guarde su contenido en el textarea antes de crear FormData
                if (tinymce.get('Crear_Descripcion')) {
                    tinymce.get('Crear_Descripcion').save();
                }

                btnGuardarCrear.disabled = true;
                btnGuardarCrear.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Guardando...';

                const formData = new FormData(this);

                if (!document.getElementById('Crear_RequiereEntrega').checked) {
                    formData.append('RequiereEntrega', 'false');
                }

                try {
                    const response = await fetch(this.action, {
                        method: 'POST',
                        body: formData // FormData incluye Content-Type: multipart/form-data
                    });

                    const jsonResponse = await response.json();

                    if (jsonResponse.success) {
                        // Éxito
                        const modal = bootstrap.Modal.getInstance(document.getElementById('crearRecursoModal'));
                        modal.hide();
                        Swal.fire('Creado!', jsonResponse.message, 'success')
                            .then(() => window.location.reload());
                    } else {
                        // Error de Validación o de Servidor
                        displayErrors('crear-recurso-validation-errors', jsonResponse);
                        Swal.fire('Error', jsonResponse.message || 'Error al crear el recurso.', 'error');
                    }
                } catch (error) {
                    Swal.fire('Error de Conexión', 'No se pudo contactar al servidor. Revise su conexión.', 'error');
                    console.error('Error de Creación:', error);
                } finally {
                    btnGuardarCrear.disabled = false;
                    btnGuardarCrear.innerHTML = 'Guardar Recurso';
                }
            });

            // B. CARGAR RECURSO PARA EDICIÓN
            async function cargarRecursoParaEdicion(recursoId) {
                try {
                    const response = await fetch(`/${controladorName}/ObtenerRecursoParaEdicion?id=${recursoId}`);
                    const jsonResponse = await response.json();

                    if (jsonResponse.success && jsonResponse.data) {
                        const data = jsonResponse.data;

                        document.getElementById('editar-recurso-validation-errors').classList.add('d-none');
                        // Llenar campos
                        document.getElementById('Editar_Id').value = data.id;
                        document.getElementById('Editar_TipoEntidad').value = data.tipoEntidad;
                        document.getElementById('Editar_EntidadId').value = data.entidadId;
                        document.getElementById('Editar_Titulo').value = data.titulo;
                        document.getElementById('Editar_Url').value = data.url || '';
                        document.getElementById('Editar_TipoRecurso').value = data.tipoRecurso;
                        document.getElementById('Editar_RequiereEntrega').checked = data.requiereEntrega;

                        // CAMBIO CLAVE: Inicializar TinyMCE con el contenido cargado
                        const descripcionContent = data.descripcion || '';
                        initTinyMCE('#Editar_Descripcion', descripcionContent);

                        // Necesario para que la lógica de visibilidad se active
                        tipoRecursoSelectEditar.dispatchEvent(new Event('change'));

                        const modal = new bootstrap.Modal(document.getElementById('editarRecursoModal'));
                        modal.show();

                    } else {
                        Swal.fire('Error de Carga', jsonResponse.message || 'No se pudo obtener la información del recurso.', 'error');
                    }
                } catch (error) {
                    Swal.fire('Error de Conexión', 'No se pudo obtener la información del recurso. Revise la consola.', 'error');
                    console.error('Error de Carga:', error);
                }
            }

            // C. EDITAR RECURSO
            editarForm.addEventListener('submit', async function (e) {
                e.preventDefault();

                // Asegúrate de que TinyMCE guarde su contenido en el textarea
                if (tinymce.get('Editar_Descripcion')) {
                    tinymce.get('Editar_Descripcion').save();
                }

                btnGuardarEdicion.disabled = true;
                btnGuardarEdicion.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Guardando...';

                const formData = new FormData(this);
                // El token de antiforgery se añade automáticamente en FormData
                if (!document.getElementById('Editar_RequiereEntrega').checked) {
                    formData.append('RequiereEntrega', 'false');
                }

                try {
                    const response = await fetch(this.action, {
                        method: 'POST',
                        body: formData
                    });

                    const jsonResponse = await response.json();

                    if (jsonResponse.success) {
                        // Éxito
                        const modal = bootstrap.Modal.getInstance(document.getElementById('editarRecursoModal'));
                        modal.hide();
                        Swal.fire('Actualizado!', jsonResponse.message, 'success')
                            .then(() => window.location.reload());
                    } else {
                        // Error de Validación o de Servidor
                        displayErrors('editar-recurso-validation-errors', jsonResponse);
                        Swal.fire('Error', jsonResponse.message || 'Error al actualizar el recurso. Revise los errores de validación.', 'error');
                    }
                } catch (error) {
                    Swal.fire('Error de Conexión', 'No se pudo contactar al servidor. Revise su conexión.', 'error');
                    console.error('Error de Edición:', error);
                } finally {
                    btnGuardarEdicion.disabled = false;
                    btnGuardarEdicion.innerHTML = 'Guardar Cambios';
                }
            });

            // D. ELIMINAR RECURSO
            async function confirmarEliminacion(recursoId) {
                const result = await Swal.fire({
                    title: '¿Estás seguro?',
                    text: "¡Eliminar este recurso también borrará las entregas asociadas de los estudiantes! No podrás revertir esto.",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Sí, eliminar',
                    cancelButtonText: 'Cancelar'
                });

                if (result.isConfirmed) {
                    try {
                        const token = getAntiForgeryToken();

                        const data = new FormData();
                        data.append('id', recursoId);
                        data.append('__RequestVerificationToken', token); // Añadir el token al FormData

                        const response = await fetch(`/${controladorName}/EliminarRecursoActividad`, {
                            method: 'POST',
                            body: data
                        });

                        const jsonResponse = await response.json();

                        if (jsonResponse.success) {
                            Swal.fire('Eliminado!', jsonResponse.message, 'success')
                                .then(() => window.location.reload());
                        } else {
                            Swal.fire('Error', jsonResponse.message, 'error');
                        }
                    } catch (error) {
                        Swal.fire('Error de Red', 'No se pudo conectar con el servidor.', 'error');
                        console.error('Error de Eliminación:', error);
                    }
                }
            }

            // --- 3. Event Listeners para la lista de recursos (Delegación) ---
            const listaRecursos = document.getElementById('lista-recursos');
            if (listaRecursos) {
                // Configuración de Sortable (Arrastrar y Soltar)
                new Sortable(listaRecursos, {
                    animation: 150,
                    handle: '.handle',
                    // Si planeas implementar el reordenamiento en el backend:
                    // onEnd: function (evt) {
                    //    const ordenIds = Array.from(evt.from.children).map(item => item.dataset.id);
                    //    // Llama a una función AJAX para guardar el nuevo orden
                    //    // guardarNuevoOrden(ordenIds);
                    // }
                });

                // Manejo de Clics en los botones de la lista
                listaRecursos.addEventListener('click', function(e) {
                    const btn = e.target.closest('.btn-editar-recurso, .btn-eliminar-recurso');
                    if (!btn) return;

                    const id = btn.dataset.id;

                    if (btn.classList.contains('btn-editar-recurso')) {
                        e.preventDefault();
                        cargarRecursoParaEdicion(id);
                    } else if (btn.classList.contains('btn-eliminar-recurso')) {
                        e.preventDefault();
                        confirmarEliminacion(id);
                    }
                });
            }
        });
    </script>
}