@model List<YSA.Web.Models.ViewModels.CursoViewModel>
@{
    ViewData["Title"] = "Gestión de Cursos";
}

<style>
    /* Estilos del card */
    .card {
        transition: transform 0.2s, box-shadow 0.2s;
        border-radius: 10px; /* Bordes redondeados para un look moderno */
        overflow: hidden; /* Para que la imagen respete el borde */
    }

        .card:hover {
            transform: translateY(-5px); /* Pequeño efecto 3D al hacer hover */
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1) !important;
        }

    /* Asegura que la imagen tenga un tamaño fijo */
    .card-img-top {
        height: 200px;
        object-fit: cover;
    }

    /* Estilos para los botones de acción dentro del card */
    .card-body .btn {
        padding: 5px 8px; /* Haz los botones un poco más compactos */
    }

    /* Ajuste para los modales */
    .modal-dialog {
        max-width: 800px;
    }
</style>

<div class="container mt-4">
    <h1 class="text-center mb-4">Gestión de Cursos</h1>
    <hr />
    <div class="d-flex justify-content-end mb-3">
        <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#crearCursoModal">
            <i class="fas fa-plus-circle"></i> Nuevo Curso
        </button>
    </div>

    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4 pb-5" id="tablaCursos">
        @foreach (var curso in Model)
        {
            <div class="col">
                <div class="card h-100 shadow-sm border-0 position-relative pb-5">
                    @if (curso.EsDestacado)
                    {
                        <span class="badge bg-warning text-dark position-absolute top-0 start-0 m-2" style="z-index: 1;">
                            <i class="fas fa-star me-1"></i> Destacado
                        </span>
                    }
                    else if (curso.EsRecomendado)
                    {
                        <span class="badge bg-info position-absolute top-0 start-0 m-2" style="z-index: 1;">
                            <i class="fas fa-thumbs-up me-1"></i> Recomendado
                        </span>
                    }

                    <img src="@curso.UrlImagen" class="card-img-top" alt="@curso.Titulo" style="height: 200px; object-fit: cover;">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title mb-1">@curso.Titulo</h5>
                        <p class="card-text text-muted small mb-2">
                            <i class="fas fa-chalkboard-teacher me-1"></i>
                            @(curso.InstructorId.HasValue ? curso.Instructor.Usuario.Nombre + " " + curso.Instructor.Usuario.Apellido : "Sin Instructor")
                        </p>

                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <span class="badge bg-secondary">@curso.Nivel</span>
                            <span class="fs-5 fw-bold text-success">@curso.Precio.ToString("C")</span>
                        </div>

                        <div class="card-text text-truncate mb-3" style="font-size: 0.9rem;">
                            @Html.Raw(curso.DescripcionCorta)
                        </div>

                        <div class="mt-auto d-flex flex-wrap gap-1">

                            <button type="button" class="btn btn-sm btn-dark asociar-artista-btn"
                                    data-bs-toggle="modal"
                                    data-bs-target="#asociarArtistaModal"
                                    data-cursoid="@curso.Id"
                                    title="Asociar Artista">
                                <i class="fas fa-user-plus"></i>
                            </button>

                            <a asp-action="GestionarAnuncios" asp-route-cursoId="@curso.Id" class="btn btn-sm btn-dark" title="Anuncios">
                                <i class="fas fa-bullhorn"></i>
                            </a>
                            <a asp-action="GestionarModulos" asp-route-cursoId="@curso.Id" class="btn btn-sm btn-info" title="Módulos">
                                <i class="fas fa-cubes"></i>
                            </a>

                            <button type="button" class="btn btn-sm btn-primary editar-btn"
                                    data-id="@curso.Id"
                                    data-bs-toggle="modal"
                                    data-bs-target="#editarCursoModal"
                                    data-titulo="@curso.Titulo"
                                    data-descripcioncorta="@curso.DescripcionCorta"
                                    data-descripcionlarga="@curso.DescripcionLarga"
                                    data-precio="@curso.Precio"
                                    data-urlimagen="@curso.UrlImagen"
                                    data-nivel="@((int)curso.Nivel)"
                                    data-categorias="@string.Join(",", curso.CategoriasSeleccionadas)" title="Editar">
                                <i class="fas fa-edit"></i>
                            </button>

                            <div class="ms-auto d-flex gap-1">
                                @if (curso.EsDestacado)
                                {
                                    <form asp-action="QuitarDestacado" asp-route-id="@curso.Id" method="post" class="d-inline">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-sm btn-warning" title="Quitar Destacado">
                                            <i class="fas fa-star-half-alt"></i>
                                        </button>
                                    </form>
                                }
                                else if (curso.EsRecomendado)
                                {
                                    <form asp-action="QuitarRecomendado" asp-route-id="@curso.Id" method="post" class="d-inline">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-sm btn-info" title="Quitar Recomendado">
                                            <i class="fas fa-thumbs-down"></i>
                                        </button>
                                    </form>
                                }
                                else
                                {
                                    <form asp-action="DestacarCurso" asp-route-id="@curso.Id" method="post" class="d-inline">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-sm btn-warning" title="Destacar">
                                            <i class="fas fa-star"></i>
                                        </button>
                                    </form>
                                    <form asp-action="RecomendarCurso" asp-route-id="@curso.Id" method="post" class="d-inline">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-sm btn-info" title="Recomendar">
                                            <i class="fas fa-thumbs-up"></i>
                                        </button>
                                    </form>
                                }
                                <form asp-action="EliminarCurso" asp-route-id="@curso.Id" method="post" class="d-inline">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-sm btn-danger eliminar-btn" title="Eliminar">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<div class="modal fade" id="asociarArtistaModal" tabindex="-1" aria-labelledby="asociarArtistaModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="asociarArtistaModalLabel">Asociar Artista al Curso</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="asociar-curso-id" name="CursoId" />
                <div class="form-group mb-3">
                    <label for="artista-select">Seleccionar Artista</label>
                    <select id="artista-select" name="InstructorId" class="form-control">
                        <option value="">-- Seleccione un Artista --</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="guardarAsociacionBtn">Asociar</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="crearCursoModal" tabindex="-1" aria-labelledby="crearCursoModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="crearCursoModalLabel">Crear Curso</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="formCrearCurso" asp-action="CrearCurso" method="post" enctype="multipart/form-data">
                <div class="modal-body">
                    <div id="crear-curso-validation-errors" class="alert alert-danger d-none"></div>
                    <div class="form-group mb-3">
                        <label for="Titulo">Título</label>
                        <input type="text" id="Crear_Titulo" name="Titulo" class="form-control" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="DescripcionCorta">Descripción Corta</label>
                        <textarea id="Crear_DescripcionCorta" name="DescripcionCorta" class="form-control" rows="3"></textarea>
                    </div>
                    <div class="form-group mb-3">
                        <label for="DescripcionLarga">Descripción Larga</label>
                        <textarea id="Crear_DescripcionLarga" name="DescripcionLarga" class="form-control" rows="5"></textarea>
                    </div>
                    <div class="form-group mb-3">
                        <label for="Precio">Precio</label>
                        <input type="number" id="Crear_Precio" name="Precio" class="form-control" step="0.01" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Nivel">Nivel</label>
                        <select id="Crear_Nivel" name="Nivel" class="form-control">
                            @foreach (var nivel in ViewBag.Niveles)
                            {
                                <option value="@nivel.Value">@nivel.Text</option>
                            }
                        </select>
                    </div>
                    <div class="form-group mb-3">
                        <label for="imagenArchivo">Imagen del Curso</label>
                        <input type="file" id="Crear_imagenArchivo" name="imagenArchivo" class="form-control" accept=".jpg,.jpeg,.png" required />
                    </div>
                    <div class="form-group mb-3">
                        <label>Categorías</label>
                        <div id="crear-categorias-checkboxes">
                            @foreach (var categoria in ViewBag.CategoriasCrear)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="CategoriasSeleccionadas" value="@categoria.Value" id="crear-categoria-@categoria.Value">
                                    <label class="form-check-label" for="crear-categoria-@categoria.Value">
                                        @categoria.Text
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-success">Guardar</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="editarCursoModal" tabindex="-1" aria-labelledby="editarCursoModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editarCursoModalLabel">Editar Curso</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="formEditarCurso" asp-action="EditarCurso" method="post" enctype="multipart/form-data">
                <div class="modal-body">
                    <div id="editar-curso-validation-errors" class="alert alert-danger d-none"></div>
                    <input type="hidden" id="Editar_Id" name="Id" />
                    <div class="form-group mb-3">
                        <label for="Titulo">Título</label>
                        <input type="text" id="Editar_Titulo" name="Titulo" class="form-control" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="DescripcionCorta">Descripción Corta</label>
                        <textarea id="Editar_DescripcionCorta" name="DescripcionCorta" class="form-control" rows="3"></textarea>
                    </div>
                    <div class="form-group mb-3">
                        <label for="DescripcionLarga">Descripción Larga</label>
                        <textarea id="Editar_DescripcionLarga" name="DescripcionLarga" class="form-control" rows="5"></textarea>
                    </div>
                    <div class="form-group mb-3">
                        <label for="Precio">Precio</label>
                        <input type="number" id="Editar_Precio" name="Precio" class="form-control" step="0.01" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Nivel">Nivel</label>
                        <select id="Editar_Nivel" name="Nivel" class="form-control">
                            @foreach (var nivel in ViewBag.Niveles)
                            {
                                <option value="@nivel.Value">@nivel.Text</option>
                            }
                        </select>
                    </div>
                    <div class="form-group mb-3">
                        <label for="imagenArchivo">Imagen del Curso</label>
                        <input type="file" id="Editar_imagenArchivo" name="imagenArchivo" class="form-control" accept=".jpg,.jpeg,.png" />
                        <small class="form-text text-muted">Deja este campo vacío para conservar la imagen actual.</small>
                        <img id="Editar_PreviewImagen" src="" class="img-thumbnail mt-2" style="max-height: 150px; display: none;" alt="Imagen actual del curso" />
                    </div>
                    <div class="form-group mb-3">
                        <label>Categorías</label>
                        <div id="editar-categorias-checkboxes">
                            @foreach (var categoria in ViewBag.CategoriasEditar)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="CategoriasSeleccionadas" value="@categoria.Value" id="editar-categoria-@categoria.Value">
                                    <label class="form-check-label" for="editar-categoria-@categoria.Value">
                                        @categoria.Text
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Actualizar</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.tiny.cloud/1/72k2eqfy02quriyevi4t2ctxtg50ucyx8gngemudhw0tyn9w/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // Inicializa TinyMCE para los campos de descripción
        function inicializarTinyMCE() {
            tinymce.init({
                selector: '#Crear_DescripcionLarga, #Editar_DescripcionLarga',
                plugins: 'anchor autolink charmap codesample emoticons link lists searchreplace table visualblocks wordcount',
                toolbar: 'undo redo | blocks fontfamily fontsize | forecolor backcolor | bold italic underline strikethrough | link image | align lineheight | numlist bullist indent outdent | emoticons charmap | removeformat',
                height: 300,
                content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:16px }'
            });

            tinymce.init({
                selector: '#Crear_DescripcionCorta, #Editar_DescripcionCorta',
                plugins: 'link lists',
                toolbar: 'bold italic | bullist numlist | link',
                height: 150
            });
        }

        document.addEventListener('DOMContentLoaded', function () {
            inicializarTinyMCE();
            // El ID 'tablaCursos' ahora apunta al div de los cards
            const cardContainer = document.getElementById('tablaCursos');
            const crearModalEl = document.getElementById('crearCursoModal');
            const editarModalEl = document.getElementById('editarCursoModal');
            const crearForm = document.getElementById('formCrearCurso');
            const editarForm = document.getElementById('formEditarCurso');
            const asociarArtistaModalEl = document.getElementById('asociarArtistaModal');
            const guardarAsociacionBtn = document.getElementById('guardarAsociacionBtn');

            function getAntiForgeryToken() {
                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                return tokenElement ? tokenElement.value : '';
            }

            asociarArtistaModalEl.addEventListener('show.bs.modal', async function (event) {
                const button = event.relatedTarget;
                const cursoId = button.getAttribute('data-cursoid');
                document.getElementById('asociar-curso-id').value = cursoId;

                const artistaSelect = document.getElementById('artista-select');
                artistaSelect.innerHTML = '<option value="">-- Seleccione un Artista --</option>'; // Reinicia las opciones

                try {
                    const response = await fetch('@Url.Action("ObtenerArtistas", "Admin")');
                    if (!response.ok) {
                        throw new Error('No se pudieron cargar los artistas.');
                    }
                    const artistas = await response.json();
                    artistas.forEach(artista => {
                        const option = document.createElement('option');
                        option.value = artista.id;
                        option.textContent = artista.nombreCompleto;
                        artistaSelect.appendChild(option);
                    });
                } catch (error) {
                    Swal.fire('Error', error.message, 'error');
                }
            });

            // Manejar el clic en el botón de "Asociar" del modal de artista
            guardarAsociacionBtn.addEventListener('click', async function () {
                const cursoId = document.getElementById('asociar-curso-id').value;
                const instructorId = document.getElementById('artista-select').value;
                const token = getAntiForgeryToken();

                if (!instructorId) {
                    Swal.fire('Atención', 'Por favor, selecciona un artista.', 'warning');
                    return;
                }

                try {
                    const response = await fetch('@Url.Action("AsociarArtistaACurso", "Admin")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify({ cursoId, instructorId })
                    });

                    const result = await response.json();
                    if (result.success) {
                        const modal = bootstrap.Modal.getInstance(asociarArtistaModalEl);
                        modal.hide();
                        Swal.fire('Éxito', result.message, 'success');
                        await recargarVista(); // Cambiado de recargarTabla a recargarVista
                    } else {
                        Swal.fire('Error', result.message, 'error');
                    }
                } catch (error) {
                    Swal.fire('Error', 'Hubo un problema al asociar el artista.', 'error');
                }
            });

            crearForm.addEventListener('submit', async function (e) {
                e.preventDefault();
                tinymce.triggerSave();

                const formData = new FormData(this);
                formData.append('__RequestVerificationToken', getAntiForgeryToken());

                // Asegurar que las categorías se incluyan en el FormData
                const categoriasSeleccionadas = Array.from(document.querySelectorAll('#crear-categorias-checkboxes input:checked')).map(cb => cb.value);
                categoriasSeleccionadas.forEach(val => formData.append('CategoriasSeleccionadas', val));

                const response = await fetch(this.action, {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    const modal = bootstrap.Modal.getInstance(crearModalEl);
                    modal.hide();
                    Swal.fire('Éxito', 'Curso creado con éxito.', 'success');
                    crearForm.reset();
                    await recargarVista(); // Cambiado de recargarTabla a recargarVista
                } else {
                    Swal.fire('Error', 'Hubo un problema al crear el curso.', 'error');
                }
            });

            editarModalEl.addEventListener('show.bs.modal', function (event) {
                const button = event.relatedTarget;
                const cursoId = button.getAttribute('data-id');
                const titulo = button.getAttribute('data-titulo');
                const descripcionCorta = button.getAttribute('data-descripcioncorta');
                const descripcionLarga = button.getAttribute('data-descripcionlarga');
                const precio = button.getAttribute('data-precio');
                const urlImagen = button.getAttribute('data-urlimagen');
                const nivel = button.getAttribute('data-nivel');
                const categoriasSeleccionadas = button.getAttribute('data-categorias') ? button.getAttribute('data-categorias').split(',').map(Number) : [];

                document.getElementById('Editar_Id').value = cursoId;
                document.getElementById('Editar_Titulo').value = titulo;
                document.getElementById('Editar_Precio').value = precio;
                document.getElementById('Editar_Nivel').value = nivel;

                tinymce.get('Editar_DescripcionCorta').setContent(descripcionCorta);
                tinymce.get('Editar_DescripcionLarga').setContent(descripcionLarga);

                const imagenPreview = document.getElementById('Editar_PreviewImagen');
                if (urlImagen) {
                    imagenPreview.src = urlImagen;
                    imagenPreview.style.display = 'block';
                } else {
                    imagenPreview.style.display = 'none';
                }

                const checkboxes = document.querySelectorAll('#editar-categorias-checkboxes input[type="checkbox"]');
                checkboxes.forEach(checkbox => {
                    const categoriaId = parseInt(checkbox.value);
                    checkbox.checked = categoriasSeleccionadas.includes(categoriaId);
                });
            });

            editarForm.addEventListener('submit', async function (e) {
                e.preventDefault();
                tinymce.triggerSave();

                const formData = new FormData(this);
                formData.append('__RequestVerificationToken', getAntiForgeryToken());

                // Asegurar que las categorías se incluyan en el FormData
                const categoriasSeleccionadas = Array.from(document.querySelectorAll('#editar-categorias-checkboxes input:checked')).map(cb => cb.value);
                categoriasSeleccionadas.forEach(val => formData.append('CategoriasSeleccionadas', val));

                const response = await fetch(this.action, {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                if (result.success) {
                    const modal = bootstrap.Modal.getInstance(editarModalEl);
                    modal.hide();
                    Swal.fire('Éxito', result.message, 'success');
                    await recargarVista(); // Cambiado de recargarTabla a recargarVista
                } else {
                    Swal.fire({
                        title: 'Error de validación',
                        html: formatValidationErrors(result.errors),
                        icon: 'error'
                    });
                }
            });

            function formatValidationErrors(errors) {
                let html = '<ul>';
                for (const key in errors) {
                    if (errors.hasOwnProperty(key)) {
                        errors[key].forEach(message => {
                            html += `<li>${message}</li>`;
                        });
                    }
                }
                html += '</ul>';
                return html;
            }

            // FUNCIÓN DE RECARGA ADAPTADA PARA CARDS
            async function recargarVista() {
                try {
                    const response = await fetch('@Url.Action("GestionarCursos", "Admin")');
                    if (!response.ok) {
                        throw new Error('No se pudieron cargar los cursos.');
                    }
                    const html = await response.text();
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');

                    // Extraer solo el contenido del nuevo contenedor de cards
                    const newCardContainer = doc.getElementById('tablaCursos').innerHTML;
                    cardContainer.innerHTML = newCardContainer;

                    attachEventListeners();
                } catch (error) {
                    Swal.fire('Error', error.message, 'error');
                }
            }

            // Event Listeners para el botón de eliminar (necesitan ser re-adjuntados después de la recarga)
            function attachEventListeners() {
                document.querySelectorAll('.eliminar-btn').forEach(button => {
                    button.addEventListener('click', function (e) {
                        e.preventDefault();
                        const form = this.closest('form');
                        Swal.fire({
                            title: '¿Estás seguro?',
                            text: "¡No podrás revertir esto!",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#d33',
                            cancelButtonColor: '#3085d6',
                            confirmButtonText: 'Sí, ¡bórralo!',
                            cancelButtonText: 'Cancelar'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                form.submit();
                            }
                        });
                    });
                });
            }
            attachEventListeners();
        });
    </script>
}