@model List<YSA.Web.Models.ViewModels.LeccionViewModel>

@{
    ViewData["Title"] = "Gestión de Lecciones - " + ViewBag.ModuloTitulo;
}

<style>
    .table-actions .btn {
        margin-right: 5px;
    }

    .modal-dialog {
        max-width: 800px; /* Aumenta el ancho del modal para el editor */
    }
</style>

<div class="container mt-4">
    <h1 class="text-center mb-4">Lecciones para el Módulo: @ViewBag.ModuloTitulo</h1>
    <hr />

    <a asp-action="GestionarModulos" asp-route-cursoId="@ViewBag.CursoId" class="btn btn-secondary mb-3">
        <i class="fas fa-arrow-left"></i> Volver a Módulos
    </a>

    <div class="d-flex justify-content-end mb-3">
        <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#crearLeccionModal">
            <i class="fas fa-plus-circle"></i> Nueva Lección
        </button>
    </div>

    <table class="table table-bordered table-hover">
        <thead class="thead-dark">
            <tr>
                <th>Orden</th>
                <th>Título</th>
                <th>Contenido</th>
                <th class="text-center">Acciones</th>
            </tr>
        </thead>
        <tbody id="tablaLecciones">
            @foreach (var leccion in Model)
            {
                <tr>
                    <td>@leccion.Orden</td>
                    <td>@leccion.Titulo</td>
                    <td>@Html.Raw(leccion.Contenido?.Length > 50 ? leccion.Contenido.Substring(0, 50) + "..." : leccion.Contenido)</td>
                    <td class="text-center">
                        <button type="button" class="btn btn-sm btn-primary editar-btn"
                                data-id="@leccion.Id"
                                data-bs-toggle="modal"
                                data-bs-target="#editarLeccionModal">
                            <i class="fas fa-edit"></i> Editar
                        </button>
                        <form asp-action="EliminarLeccion" asp-route-id="@leccion.Id" method="post" class="d-inline">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-sm btn-danger eliminar-btn">
                                <i class="fas fa-trash-alt"></i> Eliminar
                            </button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="modal fade" id="crearLeccionModal" tabindex="-1" aria-labelledby="crearLeccionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="crearLeccionModalLabel">Crear Lección</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="formCrearLeccion" asp-action="CrearLeccion" method="post">
                <div class="modal-body">
                    <div id="crear-leccion-validation-errors" class="alert alert-danger d-none"></div>
                    <input type="hidden" name="ModuloId" value="@ViewBag.ModuloId" />
                    <div class="form-group mb-3">
                        <label for="Crear_Titulo" class="form-label">Título</label>
                        <input type="text" id="Crear_Titulo" name="Titulo" class="form-control" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Crear_Orden" class="form-label">Orden</label>
                        <input type="number" id="Crear_Orden" name="Orden" class="form-control" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Crear_UrlVideo" class="form-label">URL del Video</label>
                        <input type="text" id="Crear_UrlVideo" name="UrlVideo" class="form-control" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Crear_Contenido" class="form-label">Contenido</label>
                        <textarea id="Crear_Contenido" name="Contenido" class="form-control" rows="5"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-success">Guardar</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="editarLeccionModal" tabindex="-1" aria-labelledby="editarLeccionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editarLeccionModalLabel">Editar Lección</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="formEditarLeccion" asp-action="EditarLeccion" method="post">
                <div class="modal-body">
                    <div id="editar-leccion-validation-errors" class="alert alert-danger d-none"></div>
                    <input type="hidden" id="Editar_Id" name="Id" />
                    <input type="hidden" id="Editar_ModuloId" name="ModuloId" value="@ViewBag.ModuloId" />
                    <div class="form-group mb-3">
                        <label for="Editar_Titulo" class="form-label">Título</label>
                        <input type="text" id="Editar_Titulo" name="Titulo" class="form-control" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Editar_Orden" class="form-label">Orden</label>
                        <input type="number" id="Editar_Orden" name="Orden" class="form-control" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Editar_UrlVideo" class="form-label">URL del Video</label>
                        <input type="text" id="Editar_UrlVideo" name="UrlVideo" class="form-control" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Editar_Contenido" class="form-label">Contenido</label>
                        <textarea id="Editar_Contenido" name="Contenido" class="form-control" rows="5"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Actualizar</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.tiny.cloud/1/72k2eqfy02quriyevi4t2ctxtg50ucyx8gngemudhw0tyn9w/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Inicializa TinyMCE para los campos de contenido
            tinymce.init({
                selector: '#Crear_Contenido, #Editar_Contenido',
                plugins: 'anchor autolink charmap codesample emoticons link lists searchreplace table visualblocks wordcount',
                toolbar: 'undo redo | blocks fontfamily fontsize | forecolor backcolor | bold italic underline strikethrough | link image | align lineheight | numlist bullist indent outdent | emoticons charmap | removeformat',
                height: 300,
                content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:16px }'
            });

            const crearModalEl = document.getElementById('crearLeccionModal');
            const editarModalEl = document.getElementById('editarLeccionModal');
            const crearForm = document.getElementById('formCrearLeccion');
            const editarForm = document.getElementById('formEditarLeccion');

            function getAntiForgeryToken() {
                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                return tokenElement ? tokenElement.value : '';
            }

            function displayErrors(formId, errors) {
                const errorDiv = document.getElementById(formId);
                let html = '<ul>';
                for (const key in errors) {
                    if (errors.hasOwnProperty(key)) {
                        errors[key].forEach(error => {
                            html += `<li>${error}</li>`;
                        });
                    }
                }
                html += '</ul>';
                errorDiv.innerHTML = html;
                errorDiv.classList.remove('d-none');
            }

            async function recargarTablaLecciones() {
                try {
                    // Obtiene la URL de la página actual para recargarla
                    const url = window.location.href;
                    const response = await fetch(url);
                    if (!response.ok) {
                        throw new Error('No se pudieron cargar las lecciones.');
                    }
                    const html = await response.text();
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const newTableBody = doc.getElementById('tablaLecciones').innerHTML;
                    document.getElementById('tablaLecciones').innerHTML = newTableBody;
                    attachEventListeners();
                } catch (error) {
                    Swal.fire('Error', error.message, 'error');
                }
            }

            crearForm.addEventListener('submit', async function (e) {
                e.preventDefault();
                // Asegura que el contenido del editor se actualice en el textarea antes del envío
                tinymce.triggerSave();

                const formData = new FormData(this);
                const data = {
                    ModuloId: parseInt(formData.get('ModuloId')),
                    Titulo: formData.get('Titulo'),
                    Orden: parseInt(formData.get('Orden')),
                    Contenido: formData.get('Contenido'),
                    UrlVideo: formData.get('UrlVideo')
                };

                const response = await fetch(this.action, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify(data)
                });
                const result = await response.json();
                if (result.success) {
                    Swal.fire({
                        title: '¡Éxito!',
                        text: result.message,
                        icon: 'success',
                    }).then(() => {
                        recargarTablaLecciones(); // Recarga la tabla de lecciones en lugar de la página completa
                        bootstrap.Modal.getInstance(crearModalEl).hide();
                        crearForm.reset();
                    });
                } else {
                    displayErrors('crear-leccion-validation-errors', result.errors);
                }
            });

            editarModalEl.addEventListener('show.bs.modal', async function (event) {
                const button = event.relatedTarget;
                const leccionId = button.getAttribute('data-id');

                try {
                    const response = await fetch(`@Url.Action("ObtenerLeccionPorIdJson", "Admin")?id=${leccionId}`);
                    if (!response.ok) {
                        throw new Error('No se pudo cargar la información de la lección.');
                    }
                    const result = await response.json();
                    if (result.success) {
                        const leccion = result.data;
                        document.getElementById('Editar_Id').value = leccion.id;
                        document.getElementById('Editar_ModuloId').value = leccion.moduloId;
                        document.getElementById('Editar_Titulo').value = leccion.titulo;
                        document.getElementById('Editar_Orden').value = leccion.orden;
                        document.getElementById('Editar_UrlVideo').value = leccion.urlVideo;
                        // Carga el contenido en el editor de TinyMCE
                        tinymce.get('Editar_Contenido').setContent(leccion.contenido || '');
                        document.getElementById('editar-leccion-validation-errors').classList.add('d-none');
                    } else {
                        Swal.fire('Error', result.message, 'error');
                    }
                } catch (error) {
                    Swal.fire('Error', error.message, 'error');
                }
            });

            editarForm.addEventListener('submit', async function (e) {
                e.preventDefault();
                // Asegura que el contenido del editor se actualice en el textarea antes del envío
                tinymce.triggerSave();

                const formData = new FormData(this);
                const data = {
                    Id: parseInt(formData.get('Id')),
                    ModuloId: parseInt(formData.get('ModuloId')),
                    Titulo: formData.get('Titulo'),
                    Orden: parseInt(formData.get('Orden')),
                    Contenido: formData.get('Contenido'),
                    UrlVideo: formData.get('UrlVideo')
                };

                const response = await fetch(this.action, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();
                if (result.success) {
                    Swal.fire({
                        title: '¡Éxito!',
                        text: result.message,
                        icon: 'success',
                    }).then(() => {
                        recargarTablaLecciones(); // Recarga la tabla de lecciones en lugar de la página completa
                        bootstrap.Modal.getInstance(editarModalEl).hide();
                    });
                } else {
                    displayErrors('editar-leccion-validation-errors', result.errors);
                }
            });

            function attachEventListeners() {
                document.querySelectorAll('.eliminar-btn').forEach(button => {
                    button.addEventListener('click', function (e) {
                        e.preventDefault();
                        const form = this.closest('form');
                        Swal.fire({
                            title: '¿Estás seguro?',
                            text: "¡No podrás revertir esto!",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#d33',
                            cancelButtonColor: '#3085d6',
                            confirmButtonText: 'Sí, ¡bórralo!',
                            cancelButtonText: 'Cancelar'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                form.submit();
                            }
                        });
                    });
                });
            }
            attachEventListeners();
        });
    </script>
}