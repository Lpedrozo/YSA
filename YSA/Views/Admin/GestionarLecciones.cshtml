@model List<YSA.Web.Models.ViewModels.LeccionViewModel>

@{
    ViewData["Title"] = "Gestión de Lecciones - " + ViewBag.ModuloTitulo;
}

<style>
    /* ------------------------------------- */
    /* 1. Variables B&W y Estilos Generales  */
    /* ------------------------------------- */
    :root {
        --color-secondary: #000000; /* Negro Puro (Título) */
        --color-primary: #333333; /* Gris Oscuro (Botones, Acentos) */
        --color-secondary-light: #5a5a5a; /* Gris Medio para acciones secundarias */
        --color-text-muted: #6a6a6a; /* Gris medio (Descripción) */
        --color-background-light: #f7f7f7; /* Fondo general de la página */
        --color-background-white: #ffffff; /* Fondo para las tarjetas */
        --color-border-light: #e0e0e0; /* Borde sutil */
        --color-danger: #cc0000; /* Rojo sutil para acciones peligrosas */
    }

    body {
        background-color: var(--color-background-light);
        color: var(--color-primary);
    }

    h1 {
        color: var(--color-secondary);
        font-weight: 700;
        font-size: 2rem;
    }

    hr {
        border-top: 2px solid var(--color-border-light);
        opacity: 1;
        margin-bottom: 1.5rem;
    }

    /* Botón "Volver" */
    .btn-secondary {
        background-color: var(--color-text-muted) !important;
        border-color: var(--color-text-muted) !important;
        color: white !important;
        transition: background-color 0.2s;
        border-radius: 8px;
    }

        .btn-secondary:hover {
            background-color: var(--color-primary) !important;
            border-color: var(--color-primary) !important;
        }

    /* Botón "Nueva Lección" */
    .btn-success {
        background-color: var(--color-primary) !important;
        border-color: var(--color-primary) !important;
        color: white !important;
        font-weight: 600;
        transition: background-color 0.2s;
        border-radius: 8px;
    }

        .btn-success:hover {
            background-color: var(--color-secondary) !important;
            border-color: var(--color-secondary) !important;
        }

    /* Botón "Editar" (Icono) */
    .btn-primary {
        background-color: var(--color-primary) !important;
        border-color: var(--color-primary) !important;
        color: white !important;
    }

        .btn-primary:hover {
            background-color: var(--color-secondary) !important;
            border-color: var(--color-secondary) !important;
        }

    /* Botón "Eliminar" (Icono) */
    .btn-danger {
        background-color: var(--color-danger) !important;
        border-color: var(--color-danger) !important;
        color: white !important;
    }

        .btn-danger:hover {
            background-color: #a30000 !important; /* Tono más oscuro de rojo */
            border-color: #a30000 !important;
        }

    /* Botones de Icono (Para hacerlos cuadrados y compactos) */
    .btn-icon {
        width: 36px;
        height: 36px;
        padding: 0;
        display: inline-flex;
        justify-content: center;
        align-items: center;
        flex-shrink: 0;
        border-radius: 6px;
    }

    /* -------------------------- */
    /* 2. Estilos de Cards        */
    /* -------------------------- */
    .card-style {
        border: 1px solid var(--color-border-light);
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        transition: transform 0.2s, box-shadow 0.2s;
        margin-bottom: 20px; /* Espacio entre las tarjetas */
    }

        .card-style:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

    .card-title-custom {
        color: var(--color-primary);
        font-weight: 600;
        font-size: 1.25rem;
        margin-bottom: 5px;
    }

    .leccion-orden {
        font-size: 1.8rem;
        font-weight: 700;
        color: var(--color-secondary);
        display: flex;
        align-items: center;
        margin-right: 15px;
    }

    /* -------------------------- */
    /* 3. Estilos de Modal y Título */
    /* -------------------------- */
    /* Se cambió el max-width en el HTML del modal a modal-lg (800px) */

    h1 {
        color: var(--color-secondary);
        font-weight: 700;
        font-size: 2rem;
    }

    hr {
        border-top: 2px solid var(--color-border-light);
        opacity: 1;
        margin-bottom: 1.5rem;
    }
</style>

<div class="container mt-5 mb-5 pb-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="text-center" style="margin-right: 1.5rem;">Lecciones para el módulo: @ViewBag.ModuloTitulo</h1>
    </div>

    <div class="row mb-4 g-2">
        <div class="col-12 col-sm-6">
            <a asp-action="GestionarModulos" asp-route-cursoId="@ViewBag.CursoId" class="btn btn-secondary w-100">
                <i class="fas fa-arrow-left me-2"></i> Volver a módulos
            </a>
        </div>
        <div class="col-12 col-sm-6">
            <button type="button" class="btn btn-success w-100" data-bs-toggle="modal" data-bs-target="#crearLeccionModal">
                <i class="fas fa-plus-circle me-2"></i> Nueva lección
            </button>
        </div>
    </div>
    <hr style="margin-top: 0;" />


    @if (Model == null || !Model.Any())
    {
        <div class="alert alert-info text-center" role="alert" style="border-radius: 8px; margin-top: 3rem;">
            Este módulo no tiene lecciones creadas. ¡Empieza a añadir contenido!
        </div>
    }
    else
    {
        <div class="row mb-5" id="contenedorLecciones">
            @foreach (var leccion in Model.OrderBy(l => l.Orden))
            {
                <div class="col-12 col-md-6">
                    <div class="card card-style p-3">
                        <div class="d-flex align-items-center justify-content-between">
                            <div class="d-flex align-items-center">
                                <span class="leccion-orden">@leccion.Orden.</span>
                                <div>
                                    <h5 class="card-title-custom mb-0">@leccion.Titulo</h5>
                                    <p class="card-text text-muted small mb-0">
                                        @Html.Raw(leccion.Contenido?.Length > 70 ? leccion.Contenido.Substring(0, 70) + "..." : leccion.Contenido)
                                    </p>
                                </div>
                            </div>

                            <div class="d-flex align-items-center flex-shrink-0 ms-3">
                                <a asp-action="GestionarRecursosActividades"
                                   asp-route-tipoEntidad="Leccion"
                                   asp-route-entidadId="@leccion.Id"
                                   class="btn btn-sm btn-icon me-2"
                                   style="background-color: #008CBA !important; border-color: #008CBA !important; color: white;"
                                   title="Gestionar Recursos y Actividades">
                                    <i class="fas fa-paperclip"></i>
                                </a>
                                <button type="button" class="btn btn-sm btn-primary btn-icon editar-btn me-2"
                                        data-id="@leccion.Id"
                                        data-bs-toggle="modal"
                                        data-bs-target="#editarLeccionModal"
                                        title="Editar Lección">
                                    <i class="fas fa-edit"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<div class="modal fade" id="crearLeccionModal" tabindex="-1" aria-labelledby="crearLeccionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="crearLeccionModalLabel" style="color:var(--color-secondary);">Crear lección</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="formCrearLeccion" asp-action="CrearLeccion" method="post">
                <div class="modal-body">
                    <div id="crear-leccion-validation-errors" class="alert alert-danger d-none"></div>
                    <input type="hidden" name="ModuloId" value="@ViewBag.ModuloId" />
                    <div class="form-group mb-3">
                        <label for="Crear_Titulo" class="form-label" style="color:var(--color-primary);">Título</label>
                        <input type="text" id="Crear_Titulo" name="Titulo" class="form-control" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Crear_Orden" class="form-label" style="color:var(--color-primary);">Orden</label>
                        <input type="number" id="Crear_Orden" name="Orden" class="form-control" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Crear_UrlVideo" class="form-label" style="color:var(--color-primary);">URL del video</label>
                        <input type="text" id="Crear_UrlVideo" name="UrlVideo" class="form-control" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Crear_Contenido" class="form-label" style="color:var(--color-primary);">Contenido</label>
                        <textarea id="Crear_Contenido" name="Contenido" class="form-control" rows="5"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-success">Guardar</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="editarLeccionModal" tabindex="-1" aria-labelledby="editarLeccionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editarLeccionModalLabel" style="color:var(--color-secondary);">Editar lección</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="formEditarLeccion" asp-action="EditarLeccion" method="post">
                <div class="modal-body">
                    <div id="editar-leccion-validation-errors" class="alert alert-danger d-none"></div>
                    <input type="hidden" id="Editar_Id" name="Id" />
                    <input type="hidden" id="Editar_ModuloId" name="ModuloId" value="@ViewBag.ModuloId" />
                    <div class="form-group mb-3">
                        <label for="Editar_Titulo" class="form-label" style="color:var(--color-primary);">Título</label>
                        <input type="text" id="Editar_Titulo" name="Titulo" class="form-control" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Editar_Orden" class="form-label" style="color:var(--color-primary);">Orden</label>
                        <input type="number" id="Editar_Orden" name="Orden" class="form-control" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Editar_UrlVideo" class="form-label" style="color:var(--color-primary);">URL del video</label>
                        <input type="text" id="Editar_UrlVideo" name="UrlVideo" class="form-control" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="Editar_Contenido" class="form-label" style="color:var(--color-primary);">Contenido</label>
                        <textarea id="Editar_Contenido" name="Contenido" class="form-control" rows="5"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Actualizar</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.tiny.cloud/1/72k2eqfy02quriyevi4t2ctxtg50ucyx8gngemudhw0tyn9w/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Inicializa TinyMCE para los campos de contenido
            tinymce.init({
                selector: '#Crear_Contenido, #Editar_Contenido',
                plugins: 'anchor autolink charmap codesample emoticons link lists searchreplace table visualblocks wordcount',
                toolbar: 'undo redo | blocks fontfamily fontsize | forecolor backcolor | bold italic underline strikethrough | link image | align lineheight | numlist bullist indent outdent | emoticons charmap | removeformat',
                height: 300,
                content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:16px }'
            });

            const crearModalEl = document.getElementById('crearLeccionModal');
            const editarModalEl = document.getElementById('editarLeccionModal');
            const crearForm = document.getElementById('formCrearLeccion');
            const editarForm = document.getElementById('formEditarLeccion');

            function getAntiForgeryToken() {
                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                return tokenElement ? tokenElement.value : '';
            }

            function displayErrors(formId, errors) {
                const errorDiv = document.getElementById(formId);
                let html = '<ul>';
                for (const key in errors) {
                    if (errors.hasOwnProperty(key)) {
                        errors[key].forEach(error => {
                            html += `<li>${error}</li>`;
                        });
                    }
                }
                html += '</ul>';
                errorDiv.innerHTML = html;
                errorDiv.classList.remove('d-none');
            }

            // Función para recargar el listado de lecciones con el nuevo HTML
            async function recargarContenedorLecciones() {
                const moduloId = @ViewBag.ModuloId;
                try {
                    // Carga la página completa
                    const response = await fetch(`@Url.Action("GestionarLecciones", "Admin", new { moduloId = ViewBag.ModuloId })`);
                    if (!response.ok) {
                        throw new Error('No se pudieron cargar las lecciones.');
                    }
                    const html = await response.text();
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');

                    // Reemplaza el contenido del contenedor de cards (Lecciones)
                    const newContainerContent = doc.getElementById('contenedorLecciones')?.outerHTML || '';
                    const oldContainer = document.getElementById('contenedorLecciones');

                    if (oldContainer) {
                         oldContainer.outerHTML = newContainerContent;
                    } else {
                        // Si el contenedor no existe (porque estaba vacío), recarga la página completamente o inserta el nuevo HTML
                        window.location.reload();
                        return;
                    }

                    attachEventListeners(); // Re-adjunta los eventos a los nuevos botones
                } catch (error) {
                    Swal.fire('Error', error.message, 'error');
                }
            }

            crearForm.addEventListener('submit', async function (e) {
                e.preventDefault();
                // Asegura que el contenido del editor se actualice en el textarea antes del envío
                tinymce.triggerSave();

                const formData = new FormData(this);
                const data = {
                    ModuloId: parseInt(formData.get('ModuloId')),
                    Titulo: formData.get('Titulo'),
                    Orden: parseInt(formData.get('Orden')),
                    Contenido: formData.get('Contenido'),
                    UrlVideo: formData.get('UrlVideo')
                };

                const response = await fetch(this.action, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify(data)
                });
                const result = await response.json();
                if (result.success) {
                    Swal.fire({
                        title: '¡Éxito!',
                        text: result.message,
                        icon: 'success',
                    }).then(() => {
                        recargarContenedorLecciones(); // Recarga el contenedor de cards
                        bootstrap.Modal.getInstance(crearModalEl).hide();
                        crearForm.reset();
                        // Limpiar TinyMCE
                        tinymce.get('Crear_Contenido').setContent('');
                    });
                } else {
                    displayErrors('crear-leccion-validation-errors', result.errors);
                }
            });

            editarModalEl.addEventListener('show.bs.modal', async function (event) {
                const button = event.relatedTarget;
                const leccionId = button.getAttribute('data-id');

                try {
                    const response = await fetch(`@Url.Action("ObtenerLeccionPorIdJson", "Admin")?id=${leccionId}`);
                    if (!response.ok) {
                        throw new Error('No se pudo cargar la información de la lección.');
                    }
                    const result = await response.json();
                    if (result.success) {
                        const leccion = result.data;
                        document.getElementById('Editar_Id').value = leccion.id;
                        document.getElementById('Editar_ModuloId').value = leccion.moduloId;
                        document.getElementById('Editar_Titulo').value = leccion.titulo;
                        document.getElementById('Editar_Orden').value = leccion.orden;
                        document.getElementById('Editar_UrlVideo').value = leccion.urlVideo || '';
                        // Carga el contenido en el editor de TinyMCE
                        tinymce.get('Editar_Contenido').setContent(leccion.contenido || '');
                        document.getElementById('editar-leccion-validation-errors').classList.add('d-none');
                    } else {
                        Swal.fire('Error', result.message, 'error');
                    }
                } catch (error) {
                    Swal.fire('Error', error.message, 'error');
                }
            });

            editarForm.addEventListener('submit', async function (e) {
                e.preventDefault();
                // Asegura que el contenido del editor se actualice en el textarea antes del envío
                tinymce.triggerSave();

                const formData = new FormData(this);
                const data = {
                    Id: parseInt(formData.get('Id')),
                    ModuloId: parseInt(formData.get('ModuloId')),
                    Titulo: formData.get('Titulo'),
                    Orden: parseInt(formData.get('Orden')),
                    Contenido: formData.get('Contenido'),
                    UrlVideo: formData.get('UrlVideo')
                };

                const response = await fetch(this.action, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();
                if (result.success) {
                    Swal.fire({
                        title: '¡Éxito!',
                        text: result.message,
                        icon: 'success',
                    }).then(() => {
                        recargarContenedorLecciones(); // Recarga el contenedor de cards
                        bootstrap.Modal.getInstance(editarModalEl).hide();
                    });
                } else {
                    displayErrors('editar-leccion-validation-errors', result.errors);
                }
            });

            function attachEventListeners() {
                // Re-adjunta los listeners para los botones de eliminar después de recargar el contenedor
                document.querySelectorAll('.eliminar-btn').forEach(button => {
                    button.removeEventListener('click', handleEliminarClick); // Remueve el listener previo
                    button.addEventListener('click', handleEliminarClick); // Adjunta el nuevo listener
                });
            }

            function handleEliminarClick(e) {
                e.preventDefault();
                const form = this.closest('form');
                Swal.fire({
                    title: '¿Estás seguro?',
                    text: "¡No podrás revertir esto!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#6a6a6a',
                    confirmButtonText: 'Sí, ¡bórralo!',
                    cancelButtonText: 'Cancelar'
                }).then((result) => {
                    if (result.isConfirmed) {
                        form.submit();
                    }
                });
            }

            // Llamar al adjuntar eventos al inicio
            attachEventListeners();
        });
    </script>
}