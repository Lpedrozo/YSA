@model YSA.Web.Models.ViewModels.CursosIndexViewModel
@{
    ViewData["Title"] = "Cursos Disponibles";
}

<style>

    /* Estilos globales: Esquema Claro (Light Mode) con Blanco y Negro/Gris */
        body {
                font-family: 'Inter', sans-serif;
                background-color: #ffffff; /* Fondo blanco */
                color: #333333; /* Texto principal gris oscuro */

    }


    /* Estilos para la sección de bienvenida (MANTENIDOS, PERO NO SE USAN EN EL HTML) */
        .bienvenida-section {
                background-color: #f7f7f7; /* Gris muy claro para el fondo de bienvenida */
                color: #000;
                border-bottom: 1px solid #ddd;

    }

        .bienvenida-info p {
                color: white;

    }


    /* Estilos para el carrusel de cursos */
        .carousel-item-custom {
                position: relative;
                height: 500px; /* Ajusta la altura del carrusel */
                background-size: cover;
                background-position: center;
                color: #fff; /* Texto blanco sobre la imagen del carrusel */
                text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.6); /* Sombra más fuerte para contraste */

    }

        .carousel-overlay {
                background-color: rgba(0, 0, 0, 0.4); /* Fondo semi-transparente oscuro */
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                display: flex;
                align-items: center;
                padding: 20px;

    }


    /* Estilos para las tarjetas de curso */
        .card {
                transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
                border-radius: 12px;
                border: 1px solid #e0e0e0; /* Borde muy sutil para tarjetas */
                overflow: hidden;
                background-color: #fff; /* Tarjeta blanca */
                color: #000; /* Texto negro */

    }

                .card:hover {
                        transform: translateY(-5px);
                        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1); /* Sombra visible en fondo blanco */

        }

        .card-img-top {
                border-top-left-radius: 12px;
                border-top-right-radius: 12px;

    }


    /* Contenido de la tarjeta */
        .card-body h5 {
                font-weight: 600;
                color: #000; /* Título negro */

    }

        .card-text {
                font-size: 0.9em;
                color: #666; /* Descripción gris oscuro */

    }

        .card-categories {
                font-size: 0.8em;
                color: #999;
                margin-bottom: 10px;

    }

            .card-categories .badge {
                    padding: 5px 10px;
                    margin-right: 5px;
                    background-color: #e0e0e0 !important; /* Categoría gris claro */
                    color: #333 !important;

    }


    /* Títulos de sección */
        h2 {
                color: #333333 !important; /* Títulos en gris oscuro para el fondo blanco */

    }


    /* Líneas divisorias */
        hr {
                border-top: 1px solid #cccccc; /* Línea gris */
                opacity: 1; /* Asegura que sea visible */

    }


    /* Botón de acción principal (Black/White style) */
        .btn-primary {
                background-color: #333333; /* Gris oscuro para botón principal */
                border-color: #333333;
                color: white;

    }

                .btn-primary:hover {
                        background-color: #000000; /* Negro en hover */
                        border-color: #000000;
                        color: #fff;

        }


    /* --- CORRECCIÓN 1: Filtros con mejor espaciado --- */
        .filtro-menu {
                display: flex;
                justify-content: center;
                flex-wrap: wrap;
                margin-top: 20px;
                margin-bottom: 30px;
        /* Usa gap para un espaciado consistente entre elementos */
        gap: 10px;

    }

        .filtro-item {
        /* Eliminar el margin-bottom para evitar duplicación, pero se mantiene la estructura */
        /* Puede que no sea necesario un margin aquí si usamos gap en el padre, pero se mantiene para consistencia */
        margin: 0;
    }

            .filtro-item a {
                    padding: 8px 15px;
            /* Eliminar el margin en 'a' para que 'gap' en .filtro-menu maneje el espaciado */

            /* margin: 5px; */
                    text-decoration: none;
                    color: #333333; /* Texto gris oscuro por defecto */
                    background-color: #f0f0f0; /* Fondo gris muy claro */
                    border-radius: 20px;
                    transition: background-color 0.2s, color 0.2s;
                    border: 1px solid #cccccc;
                    display: block; /* Asegura que el padding funcione bien */

        }

            .filtro-item a.active {
                    background-color: #333333; /* Activo en gris oscuro */
                    color: #fff; /* Texto blanco */
                    border-color: #333333;

    }


    /* Fin Corrección 1 */

    /* Paginación */
        .pagination .page-link {
                color: #333333; /* Enlaces de paginación gris oscuro */
                border: 1px solid #cccccc;
                background-color: #ffffff;

    }

        .pagination .page-item.active .page-link {
                background-color: #333333;
                border-color: #333333;
                color: #fff;

    }

        .pagination .page-item.disabled .page-link {
                color: #999999;
                background-color: #f0f0f0;
                border-color: #e0e0e0;

    }


    /* Placeholder para el input de búsqueda */
        .form-control::placeholder {
                color: #999999;
                opacity: 1; /* Firefox */

    }

        .form-control {
                border-color: #cccccc;
                color: #333333;

    }
</style>

@if (Model == null || (!Model.CursosDestacados.Any() && !Model.CursosRecomendados.Any()))
{
    <div class="alert alert-info text-center" role="alert">
        No hay cursos disponibles en este momento.
    </div>
}
else
{
    @* Seccion para Cursos Destacados (Carrusel) *@
    @if (Model.CursosDestacados.Any())
    {
        <div id="cursoCarousel" class="carousel slide mb-5" data-bs-ride="carousel" style="width:100%">
            <div class="carousel-inner rounded">
                @for (int i = 0; i < Model.CursosDestacados.Count; i++)
                {
                    var curso = Model.CursosDestacados[i];
                    <div class="carousel-item @(i == 0 ? "active" : "") carousel-item-custom" style="background-image: url('@curso.UrlImagen');">
                        <div class="carousel-overlay">
                            <div class="container text-start">
                                <h2 class="display-4 fw-bold text-white">@curso.Titulo</h2>
                                <p class="lead">@Html.Raw(curso.DescripcionCorta)</p>
                                <a asp-action="Detalles" asp-route-id="@curso.Id" class="btn btn-primary btn-lg mt-3">Ver Curso</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <button class="carousel-control-prev" type="button" data-bs-target="#cursoCarousel" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Anterior</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#cursoCarousel" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Siguiente</span>
            </button>
        </div>
    }

    @* Seccion para Cursos Recomendados (Carrusel de 3 cards) *@
    @if (Model.CursosRecomendados.Any())
    {
        <div class="container mt-5 mb-5">
            <h2 class="mb-4">Cursos Recomendados para ti</h2>
            <hr />
            <div id="recomendadosCarousel" class="carousel slide" data-bs-ride="carousel">
                <div class="carousel-inner">
                    @{
                        // CORRECCIÓN 2: Se debe calcular el número de elementos a mostrar en base al tamaño de la pantalla
                        // Sin embargo, esta lógica de Razor no tiene acceso al tamaño de la pantalla.
                        // La corrección se hará en el HTML usando clases responsivas de Bootstrap.
                        // Mantendremos itemsPorGiro=3 para el cálculo de los slides.

                        int itemsPorGiro = 3;
                        int totalCursosRecomendados = Model.CursosRecomendados.Count;
                        int totalGiro = (int)Math.Ceiling(totalCursosRecomendados / (double)itemsPorGiro);
                    }
                    @for (int i = 0; i < totalGiro; i++)
                    {
                        <div class="carousel-item @(i == 0 ? "active" : "")">
                            @* CORRECCIÓN 2: Se cambia row-cols-1 row-cols-md-3 para 1 tarjeta en móvil y 3 en desktop *@
                            <div class="row row-cols-1 row-cols-md-3 g-4">
                                @foreach (var curso in Model.CursosRecomendados.Skip(i * itemsPorGiro).Take(itemsPorGiro))
                                {
                                    <div class="col">
                                        <div class="card h-100 shadow-sm"
                                                                    data-bs-toggle="popover"
                                                                    data-bs-trigger="hover focus"
                                                                    data-bs-placement="right"
                                                                    data-bs-html="true">

                                            <div style="display: none;" class="popover-course-data">
                                                <span data-course-id="@curso.Id"></span>
                                                <span data-course-title="@curso.Titulo"></span>
                                                <span data-course-description="@curso.DescripcionCorta"></span>
                                                <span data-course-image="@curso.UrlImagen"></span>
                                                <span data-course-price="@curso.Precio.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("es-VE"))"></span>
                                            </div>

                                            @if (!string.IsNullOrEmpty(curso.UrlImagen))
                                            {
                                                <img src="@curso.UrlImagen" class="card-img-top" alt="Imagen del curso: @curso.Titulo" style="height: 200px; object-fit: cover;">
                                            }
                                            else
                                            {
                                                <img src="https://via.placeholder.com/400x200.png?text=Sin+Imagen" class="card-img-top" alt="Imagen de marcador de posición" style="height: 200px; object-fit: cover;">
                                            }
                                            <div class="card-body d-flex flex-column">
                                                <h5 class="card-title">@curso.Titulo</h5>
                                                <p class="card-text text-muted flex-grow-1">@Html.Raw(curso.DescripcionCorta)</p>

                                                @if (curso.ListaCategorias != null && curso.ListaCategorias.Any())
                                                {
                                                    <div class="card-categories">
                                                        @foreach (var categoria in curso.ListaCategorias)
                                                        {
                                                            <span class="badge bg-secondary">@categoria</span>
                                                        }
                                                    </div>
                                                }

                                                <div class="d-flex justify-content-between align-items-center mt-auto">
                                                    <h6 class="card-subtitle mb-0" style="">@curso.Precio.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("es-VE"))</h6>
                                                    <a asp-action="Detalles" asp-route-id="@curso.Id" class="btn btn-primary text-white">Ver Detalles</a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#recomendadosCarousel" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Anterior</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#recomendadosCarousel" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Siguiente</span>
                </button>
            </div>
        </div>
    }

    @* Seccion para todos los cursos (con filtros y paginación) - Se carga con JSON *@
    <div class="container mt-4 mb-5 pb-5">
        <h2 class="text-center mt-5 mb-4">Explora todos los cursos</h2>
        <hr />

        <div class="row justify-content-center mb-4">
            <div class="col-md-6">
                <div class="input-group">
                    <input type="text" class="form-control" id="searchStringInput" placeholder="Buscar por título o descripción..." />
                    <button class="btn btn-primary" type="button" id="searchButton">Buscar</button>
                </div>
            </div>
        </div>

        <div class="filtro-menu">
            <div class="filtro-item">
                <a href="#" class="filtro-btn active" data-filtro-categoria="">Todas</a>
            </div>
            @foreach (var categoria in Model.CategoriasDisponibles)
            {
                <div class="filtro-item">
                    <a href="#" class="filtro-btn" data-filtro-categoria="@categoria">@categoria</a>
                </div>
            }
            <div class="filtro-item">
                <a href="#" class="filtro-btn" data-filtro-nivel="">Todos los Niveles</a>
            </div>
            @foreach (var nivel in (IEnumerable<YSA.Core.Enums.NivelDificultad>)Enum.GetValues(typeof(YSA.Core.Enums.NivelDificultad)))
            {
                <div class="filtro-item">
                    <a href="#" class="filtro-btn" data-filtro-nivel="@((int)nivel)">@nivel.ToString()</a>
                </div>
            }
        </div>

        <div id="cursos-list-container">
        </div>
    </div>
}

@section Scripts {
    @{
        // Verifica si el indicador de éxito existe en TempData
        var pagoRegistrado = TempData["PagoRegistrado"] as bool?;
    }

    @if (pagoRegistrado.HasValue && pagoRegistrado.Value)
    {
        <script>
            // Usar un temporizador para asegurar que el DOM y las librerías se cargaron
            $(document).ready(function() {
                Swal.fire({
                    title: '¡Pago Registrado!',
                    html: 'Su comprobante ha sido subido con éxito.<br>Su pedido está en validación por parte de nuestro equipo. Le notificaremos cuando tenga acceso a sus cursos.',
                    icon: 'success',
                    confirmButtonText: 'Entendido',
                    customClass: {
                        confirmButton: 'btn-primary' // Si tienes una clase de estilo para botones primarios
                    }
                });
            });
        </script>
    }

    <script>
        // Lógica de carga asíncrona de cursos desde JSON
        async function cargarCursos(page, categoria, nivel, searchString) {
            const container = document.getElementById('cursos-list-container');

            // Muestra un indicador de carga
            container.innerHTML = `<div class="text-center mt-5 mb-5"><div class="spinner-border text-dark" role="status"><span class="visually-hidden">Cargando...</span></div></div>`;

            const url = `@Url.Action("ObtenerCursosJson", "Curso")?page=${page}&categoria=${categoria}&nivel=${nivel}&searchString=${searchString}`;

            try {
                const response = await fetch(url);
                const data = await response.json();

                let html = '';
                if (data.cursos.length === 0) {
                    html = `<div class="alert alert-warning text-center" role="alert">No se encontraron cursos con los filtros aplicados.</div>`;
                } else {
                    // El contenedor de cursos cargados asíncronamente ya tiene clases responsivas
                    html += `<div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-4">`;
                    data.cursos.forEach(curso => {
                        html += `
                            <div class="col">
                                <div class="card h-100 shadow-sm"
                                    data-bs-toggle="popover"
                                    data-bs-trigger="hover focus"
                                    data-bs-placement="right"
                                    data-bs-html="true">

                                    <div style="display: none;" class="popover-course-data">
                                        <span data-course-id="${curso.id}"></span>
                                        <span data-course-title="${curso.titulo}"></span>
                                        <span data-course-description="${curso.descripcionCorta}"></span>
                                        <span data-course-image="${curso.urlImagen}"></span>
                                        <span data-course-price="${curso.precio}"></span>
                                    </div>

                                    <img src="${curso.urlImagen || 'https://via.placeholder.com/400x200.png?text=Sin+Imagen'}" class="card-img-top" alt="Imagen del curso: ${curso.titulo}" style="height: 200px; object-fit: cover;">
                                    <div class="card-body d-flex flex-column">
                                        <h5 class="card-title">${curso.titulo}</h5>
                                        <p class="card-text text-muted flex-grow-1">${curso.descripcionCorta}</p>

                                        ${curso.categorias.length > 0 ? `
                                            <div class="card-categories">
                                                ${curso.categorias.map(cat => `<span class="badge bg-secondary">${cat}</span>`).join('')}
                                            </div>
                                        ` : ''}

                                        <div class="d-flex justify-content-between align-items-center mt-auto">
                                            <h6 class="card-subtitle mb-0">${curso.precio}</h6>
                                            <a href="/Curso/Detalles?id=${curso.id}" class="btn btn-primary text-white">Ver Detalles</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `;
                    });
                    html += `</div>`;

                    // Paginación
                    html += `<nav aria-label="Paginación de cursos" class="mt-5 pb-5">
                        <ul class="pagination justify-content-center">
                            <li class="page-item ${data.paginaActual <= 1 ? 'disabled' : ''}">
                                <a href="#" class="page-link" data-page="${data.paginaActual - 1}">Anterior</a>
                            </li>`;
                    for (let i = 1; i <= data.totalPaginas; i++) {
                        html += `<li class="page-item ${i === data.paginaActual ? 'active' : ''}">
                                        <a href="#" class="page-link" data-page="${i}">${i}</a>
                                    </li>`;
                    }
                    html += `<li class="page-item ${data.paginaActual >= data.totalPaginas ? 'disabled' : ''}">
                                <a href="#" class="page-link" data-page="${data.paginaActual + 1}">Siguiente</a>
                            </li>
                        </ul>
                    </nav>`;
                }

                container.innerHTML = html;

                // Re-inicializar popovers
                var popoverTriggerList = [].slice.call(container.querySelectorAll('[data-bs-toggle="popover"]'))
                popoverTriggerList.map(function (popoverTriggerEl) {
                    const popover = new bootstrap.Popover(popoverTriggerEl, {
                        content: function () {
                            const dataElement = this.querySelector('.popover-course-data');
                            const cursoId = dataElement.querySelector('[data-course-id]').getAttribute('data-course-id');
                            const titulo = dataElement.querySelector('[data-course-title]').getAttribute('data-course-title');
                            const descripcion = dataElement.querySelector('[data-course-description]').getAttribute('data-course-description');
                            const imagenUrl = dataElement.querySelector('[data-course-image]').getAttribute('data-course-image');

                            return `
                                <div class="popover-content" style="color: #333;">
                                    <div class="d-flex mb-3 align-items-center">
                                        <img src="${imagenUrl || 'https://via.placeholder.com/80x80.png?text=Sin+Imagen'}" class="me-3 rounded" style="width: 80px; height: 80px; object-fit: cover;" alt="Imagen del curso">
                                        <div>
                                            <h6 class="popover-title mb-0">${titulo}</h6>
                                        </div>
                                    </div>
                                    <p class="text-muted small">${descripcion}</p>
                                    <div class="d-grid gap-2">
                                        <a href="/Curso/Detalles?id=${cursoId}" class="btn btn-primary btn-sm">Ver Detalles</a>
                                    </div>
                                </div>
                            `;
                        },
                        html: true,
                        sanitize: false
                    });
                    return popover;
                });

            } catch (error) {
                console.error('Error al cargar los cursos:', error);
                container.innerHTML = `<div class="alert alert-danger text-center mt-5" role="alert">Error al cargar los cursos. Por favor, inténtalo de nuevo.</div>`;
            }
        }

        document.getElementById('searchButton').addEventListener('click', function() {
            const searchString = document.getElementById('searchStringInput').value;
            const categoriaActual = document.querySelector('.filtro-btn.active[data-filtro-categoria]')?.dataset.filtroCategoria || '';
            const nivelActual = document.querySelector('.filtro-btn.active[data-filtro-nivel]')?.dataset.filtroNivel || '';
            cargarCursos(1, categoriaActual, nivelActual, searchString);
        });

        document.querySelector('.filtro-menu').addEventListener('click', function(e) {
            if (e.target.classList.contains('filtro-btn')) {
                e.preventDefault();

                const searchString = document.getElementById('searchStringInput').value;
                const categoria = e.target.dataset.filtroCategoria !== undefined ? e.target.dataset.filtroCategoria : null;
                const nivel = e.target.dataset.filtroNivel !== undefined ? e.target.dataset.filtroNivel : null;

                if (categoria !== null) {
                    document.querySelectorAll('.filtro-btn[data-filtro-categoria]').forEach(btn => btn.classList.remove('active'));
                }
                if (nivel !== null) {
                    document.querySelectorAll('.filtro-btn[data-filtro-nivel]').forEach(btn => btn.classList.remove('active'));
                }

                e.target.classList.add('active');

                const categoriaFinal = document.querySelector('.filtro-btn.active[data-filtro-categoria]')?.dataset.filtroCategoria || '';
                const nivelFinal = document.querySelector('.filtro-btn.active[data-filtro-nivel]')?.dataset.filtroNivel || '';

                cargarCursos(1, categoriaFinal, nivelFinal, searchString);
            }
        });

        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('page-link')) {
                e.preventDefault();
                const page = e.target.dataset.page;
                const categoriaActual = document.querySelector('.filtro-btn.active[data-filtro-categoria]')?.dataset.filtroCategoria || '';
                const nivelActual = document.querySelector('.filtro-btn.active[data-filtro-nivel]')?.dataset.filtroNivel || '';
                const searchString = document.getElementById('searchStringInput').value;
                cargarCursos(page, categoriaActual, nivelActual, searchString);
            }
        });

        document.addEventListener('DOMContentLoaded', () => {
            cargarCursos(1, '', '', '');
        });

        // Inicializar popovers de los cursos recomendados (código inicial de Razor)
        document.querySelectorAll('[data-bs-toggle="popover"]').forEach(popoverEl => {
            const popoverInstance = new bootstrap.Popover(popoverEl, {
                content: function () {
                    const dataElement = this.querySelector('.popover-course-data');
                    const cursoId = dataElement.querySelector('[data-course-id]').getAttribute('data-course-id');
                    const titulo = dataElement.querySelector('[data-course-title]').getAttribute('data-course-title');
                    const descripcion = dataElement.querySelector('[data-course-description]').getAttribute('data-course-description');
                    const imagenUrl = dataElement.querySelector('[data-course-image]').getAttribute('data-course-image');

                    return `
                        <div class="popover-content" style="color: #333;">
                            <div class="d-flex mb-3 align-items-center">
                                <img src="${imagenUrl || 'https://via.placeholder.com/80x80.png?text=Sin+Imagen'}" class="me-3 rounded" style="width: 80px; height: 80px; object-fit: cover;" alt="Imagen del curso">
                                <div>
                                    <h6 class="popover-title mb-0">${titulo}</h6>
                                </div>
                            </div>
                            <p class="text-muted small">${descripcion}</p>
                            <div class="d-grid gap-2">
                                <a href="/Curso/Detalles?id=${cursoId}" class="btn btn-primary btn-sm">Ver Detalles</a>
                            </div>
                        </div>
                    `;
                },
                html: true,
                sanitize: false
            });
        });
    </script>
}