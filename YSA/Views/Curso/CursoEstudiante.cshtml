@using YSA.Web.Models.ViewModels
@model YSA.Web.Models.ViewModels.CursoCompletoViewModel

@{
    ViewData["Title"] = Model.Titulo;
    Layout = "_Layout";
}

<style>
    /* Importación de Google Fonts para una tipografía moderna */
    @@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&display=swap');

    

    /* Estilos generales */
    body {
        font-family: 'Montserrat', sans-serif;
        color: var(--color-text-main);
        background-color: var(--color-bg-dark);
    }

    .course-player-container {
        display: flex;
        flex-direction: column;
        min-height: calc(100vh - 56px); /* 100vh - altura de la barra de navegación */
    }

    .main-content {
        flex-grow: 1;
        display: flex;
    }

    .video-player {
        flex: 1;
        background-color: var(--color-bg-dark);
        display: flex;
        justify-content: center;
        align-items: center;
        position: relative;
        padding-bottom: 56.25%; /* Relación de aspecto 16:9 */
        height: 0;
        overflow: hidden;
    }

    .video-frame {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }

    .sidebar {
        width: 350px;
        background-color: var(--color-bg-light);
        color: var(--color-text-main);
        overflow-y: auto;
        padding: 2rem;
        border-left: 1px solid var(--color-border);
        transition: transform 0.3s ease-in-out;
    }

    /* Estilos del menú del curso */
    .course-menu h4 {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--color-accent);
        margin-bottom: 1.5rem;
    }

    .accordion-item {
        background-color: transparent;
        border: none;
        margin-bottom: 0.5rem;
    }

    .accordion-button {
        background-color: var(--color-border);
        color: var(--color-text-main);
        font-weight: 600;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

        .accordion-button:not(.collapsed) {
            background-color: var(--color-accent);
            color: var(--color-bg-dark); /* Texto oscuro en botón activo */
        }

        .accordion-button:hover {
            background-color: #444;
            color: var(--color-accent);
            transform: translateY(-2px);
        }

    .list-group-item {
        background-color: transparent;
        border: none;
        padding: 0.5rem 1rem;
    }

    .lesson-link {
        color: var(--color-text-main);
        text-decoration: none;
        display: flex;
        align-items: center;
        padding: 0.5rem 1rem;
        transition: background-color 0.3s, color 0.3s;
        border-radius: 5px;
    }

        .lesson-link:hover {
            background-color: #2a2a2a;
            color: var(--color-accent);
        }

        .lesson-link i {
            color: var(--color-text-muted);
            transition: color 0.3s;
        }

        .lesson-link:hover i {
            color: var(--color-accent);
        }

        /* NUEVOS ESTILOS PARA LA LECCIÓN COMPLETADA */
        .lesson-link.completed {
            color: var(--color-success);
            font-weight: 600;
        }

            .lesson-link.completed i {
                color: var(--color-success);
            }

            .lesson-link.completed:hover {
                background-color: #2a2a2a;
                color: var(--color-success);
            }

    /* --- CAMBIOS PARA LA SECCIÓN INFERIOR --- */
    .course-details-section {
        background-color: var(--color-bg-bottom); /* Fondo blanco */
        color: var(--color-text-bottom-main); /* Texto principal negro */
        padding: 2rem;
        flex-shrink: 0;
        border-top: 1px solid var(--color-border-bottom); /* Borde superior gris claro */
    }

        .course-details-section h5 {
            color: var(--color-text-bottom-main); /* Títulos negros */
        }

        .course-details-section p,
        .course-details-section small,
        .course-details-section .text-muted {
            color: var(--color-text-bottom-muted) !important; /* Texto secundario gris */
        }

    .nav-tabs .nav-link {
        color: var(--color-text-bottom-muted); /* Color de texto normal en pestañas */
        border: none;
        border-bottom: 2px solid transparent;
        transition: all 0.3s;
    }

        .nav-tabs .nav-link:hover {
            border-color: var(--color-accent);
            color: var(--color-accent);
        }

        .nav-tabs .nav-link.active {
            color: var(--color-accent);
            background-color: transparent;
            border-color: var(--color-accent);
        }

    .tab-content .card {
        background-color: var(--color-card-bottom) !important; /* Fondo de tarjeta gris muy claro */
        border: 1px solid var(--color-border-bottom); /* Borde de tarjeta gris claro */
        border-radius: 10px;
    }

    .form-control, .form-select {
        background-color: #fff; /* Fondo blanco para inputs */
        color: var(--color-text-bottom-main); /* Texto negro en inputs */
        border-color: var(--color-border-bottom); /* Borde gris en inputs */
    }

        .form-control::placeholder {
            color: var(--color-text-bottom-muted); /* Placeholder gris */
        }

    /* Mantener el botón de acción */
    .btn-action {
        background-color: var(--color-accent);
        color: var(--color-bg-dark); /* Texto oscuro en el botón de acento */
        border: none;
        font-weight: 600;
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .btn-action:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

    /* Media Queries para responsividad */
    @@media (max-width: 992px) {
        .main-content {
            flex-direction: column;
        }

        .sidebar {
            width: 100%;
            border-left: none;
            border-top: 1px solid var(--color-border);
        }
    }
</style>

<div class="course-player-container">
    <div class="main-content">
        <div class="video-player">
            @{
                var firstLessonUrl = Model.Modulos.FirstOrDefault()?.Lecciones.FirstOrDefault()?.UrlVideo;
                var firstLessonEmbedUrl = string.Empty;

                if (!string.IsNullOrEmpty(firstLessonUrl))
                {
                    var videoId = firstLessonUrl.Split('/').Last().Split('?').First();
                    firstLessonEmbedUrl = $"https://www.youtube.com/embed/{videoId}";
                }
            }
            <iframe class="video-frame" id="leccionVideo"
                    src="@firstLessonEmbedUrl"
                    frameborder="0"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                    allowfullscreen></iframe>
        </div>

        <div class="sidebar">
            <div class="course-menu">
                <h4>Contenido del Curso</h4>
                <div class="accordion accordion-flush" id="courseAccordion">
                    @foreach (var modulo in Model.Modulos)
                    {
                        <div class="accordion-item">
                            <h2 class="accordion-header">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@modulo.Id" aria-expanded="false">
                                    <i class="fas fa-folder me-2"></i>
                                    @modulo.Titulo
                                </button>
                            </h2>
                            <div id="collapse-@modulo.Id" class="accordion-collapse collapse" data-bs-parent="#courseAccordion">
                                <div class="accordion-body p-0">
                                    <ul class="list-group list-group-flush">
                                        @foreach (var leccion in modulo.Lecciones)
                                        {
                                            <li class="list-group-item">
                                                @{
                                                    var linkClass = leccion.CompletadaPorEstudiante ? "lesson-link completed" : "lesson-link";
                                                    var iconClass = leccion.CompletadaPorEstudiante ? "fas fa-check-circle" : "fas fa-play-circle";
                                                }
                                                <a href="#" class="@linkClass" data-video-url="@leccion.UrlVideo" data-lesson-id="@leccion.Id">
                                                    <i class="@iconClass me-2"></i> @leccion.Titulo
                                                </a>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="course-details-section">
        <div class="container-fluid">
            <ul class="nav nav-tabs" id="myTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="descripcion-tab" data-bs-toggle="tab" data-bs-target="#descripcion-tab-pane" type="button" role="tab" aria-controls="descripcion-tab-pane" aria-selected="true">Descripción</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="preguntas-tab" data-bs-toggle="tab" data-bs-target="#preguntas-tab-pane" type="button" role="tab" aria-controls="preguntas-tab-pane" aria-selected="false">Preguntas</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="anuncios-tab" data-bs-toggle="tab" data-bs-target="#anuncios-tab-pane" type="button" role="tab" aria-controls="anuncios-tab-pane" aria-selected="false">Anuncios</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="resenas-tab" data-bs-toggle="tab" data-bs-target="#resenas-tab-pane" type="button" role="tab" aria-controls="resenas-tab-pane" aria-selected="false">Reseñas</button>
                </li>
            </ul>

            <div class="tab-content mt-3" id="myTabContent">
                <div class="tab-pane fade show active" id="descripcion-tab-pane" role="tabpanel" aria-labelledby="descripcion-tab" tabindex="0">
                    <p class="text-muted">@Html.Raw(Model.DescripcionLarga)</p>
                </div>
                <div class="tab-pane fade" id="preguntas-tab-pane" role="tabpanel" aria-labelledby="preguntas-tab" tabindex="0">
                    <div class="card p-4 mb-4">
                        <h5>Haz una pregunta</h5>
                        <form asp-controller="Curso" asp-action="CrearPregunta" method="post">
                            <input type="hidden" name="CursoId" value="@Model.Id" />
                            <div class="mb-3">
                                <textarea class="form-control" id="preguntaTexto" name="Pregunta" rows="4" placeholder="Escribe tu pregunta aquí..." required></textarea>
                            </div>
                            <button type="submit" class="btn btn-action">Enviar Pregunta</button>
                        </form>
                    </div>

                    <h5 class="mt-5">Preguntas y respuestas del curso</h5>
                    @if (Model.Preguntas != null && Model.Preguntas.Any())
                    {
                        @foreach (var qa in Model.Preguntas.OrderByDescending(q => q.FechaPregunta))
                        {
                            <div class="card p-3 my-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <small class="text-muted">Preguntado por <strong>@qa.NombreEstudiante</strong> el @qa.FechaPregunta.ToShortDateString()</small>
                                </div>
                                <p class="mb-2"><strong>Pregunta:</strong> @qa.Pregunta</p>
                                @if (!string.IsNullOrEmpty(qa.Respuesta))
                                {
                                    <div class="mt-2 ps-3 border-start border-warning">
                                        <small class="text-muted"><strong>@qa.NombreInstructor</strong> respondió:</small>
                                        <p class="mb-0">@qa.Respuesta</p>
                                        <small class="text-muted">el @qa.FechaRespuesta?.ToShortDateString()</small>
                                    </div>
                                }
                                else
                                {
                                    <p class="text-muted mt-2">El instructor aún no ha respondido a esta pregunta.</p>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">Sé el primero en hacer una pregunta sobre este curso.</p>
                    }
                </div>
                <div class="tab-pane fade" id="anuncios-tab-pane" role="tabpanel" aria-labelledby="anuncios-tab" tabindex="0">
                    @if (Model.Anuncios != null && Model.Anuncios.Any())
                    {
                        @foreach (var anuncio in Model.Anuncios.OrderByDescending(a => a.FechaPublicacion))
                        {
                            <div class="card p-4 my-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6 class="mb-0 text-warning">@anuncio.Titulo</h6>
                                    <small class="text-muted">Publicado el @anuncio.FechaPublicacion.ToShortDateString()</small>
                                </div>
                                <p class="mb-0">@anuncio.Contenido</p>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">Aún no hay anuncios publicados para este curso.</p>
                    }
                </div>
                <div class="tab-pane fade" id="resenas-tab-pane" role="tabpanel" aria-labelledby="resenas-tab" tabindex="0">
                    <div class="card p-4 mb-4">
                        <h5>Deja tu reseña</h5>
                        <form asp-controller="Curso" asp-action="CrearResena" method="post">
                            <input type="hidden" name="CursoId" value="@Model.Id" />
                            <div class="mb-3">
                                <label for="calificacion" class="form-label">Calificación</label>
                                <select class="form-select" id="calificacion" name="Calificacion">
                                    <option value="5">⭐⭐⭐⭐⭐</option>
                                    <option value="4">⭐⭐⭐⭐</option>
                                    <option value="3">⭐⭐⭐</option>
                                    <option value="2">⭐⭐</option>
                                    <option value="1">⭐</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="comentario" class="form-label">Comentario</label>
                                <textarea class="form-control" id="comentario" name="Comentario" rows="3" placeholder="Escribe tu comentario aquí..."></textarea>
                            </div>
                            <button type="submit" class="btn btn-action">Enviar Reseña</button>
                        </form>
                    </div>

                    <h5 class="mt-5">Reseñas de los estudiantes</h5>
                    @if (Model.Resenas != null && Model.Resenas.Any())
                    {
                        @foreach (var resena in Model.Resenas)
                        {
                            <div class="card p-3 my-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="d-flex align-items-center">
                                        <div class="me-2">
                                            @* Aquí iría la imagen del usuario, si la tuvieras *@
                                        </div>
                                        <h6 class="mb-0">@resena.NombreUsuario</h6>
                                    </div>
                                    <small class="text-muted">@resena.Fecha.ToShortDateString()</small>
                                </div>
                                <div class="text-warning my-2">
                                    @for (int i = 0; i < resena.Calificacion; i++)
                                    {
                                        <i class="fas fa-star"></i>
                                    }
                                </div>
                                <p class="mb-0 text-muted">@resena.Comentario</p>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">Sé el primero en dejar una reseña para este curso.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const videoFrame = document.getElementById('leccionVideo');

            // Define el endpoint para la API de progreso
            const progresoEndpoint = '@Url.Action("MarcarLeccionComoCompletada", "Curso")';

            document.querySelectorAll('.lesson-link').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();

                    document.querySelectorAll('.lesson-link').forEach(l => l.classList.remove('active'));
                    this.classList.add('active');

                    const videoUrl = this.getAttribute('data-video-url');
                    const lessonId = this.getAttribute('data-lesson-id');

                    if (videoUrl) {
                        const videoId = videoUrl.split('/').pop().split('?')[0];
                        const embedUrl = `https://www.youtube.com/embed/${videoId}`;
                        videoFrame.src = embedUrl;

                        // Llama a la API para marcar la lección como completada
                        // Se puede optimizar para que se llame cuando el video termine o después de un tiempo
                        if (lessonId) {
                            fetch(`${progresoEndpoint}?leccionId=${lessonId}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-Requested-With': 'XMLHttpRequest'
                                }
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    console.log('Lección marcada como completada con éxito.');
                                    // Actualiza la interfaz de usuario para reflejar el estado de completado
                                    this.classList.add('completed');
                                    const icon = this.querySelector('i');
                                    if (icon) {
                                        icon.classList.remove('fa-play-circle');
                                        icon.classList.add('fa-check-circle');
                                    }
                                } else {
                                    console.error('Error al marcar la lección:', data.message);
                                }
                            })
                            .catch(error => {
                                console.error('Hubo un error en la solicitud:', error);
                            });
                        }
                    }
                });
            });
        });
    </script>
}