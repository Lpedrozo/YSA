@using YSA.Web.Models.ViewModels
@model YSA.Web.Models.ViewModels.CursoCompletoViewModel

@{
	ViewData["Title"] = Model.Titulo;
	Layout = "_Layout";
}

<style>

	/* Estilos generales */
		@@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

		body {
				font-family: 'Inter', sans-serif;
				background-color: #f7f9fa;
				color: #212529;

	}

		.course-page-container {
				padding: 2rem 0;

	}

		.course-tabs-header {
				background-color: #fff;
				padding: 1rem;
				border-radius: 8px;
				box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
				margin-bottom: 2rem;

	}

		.nav-tabs .nav-link {
				font-weight: 500;
				color: #6c757d;
				border-color: transparent;

	}

			.nav-tabs .nav-link.active {
					color: #212529;
					border-color: #dee2e6 #dee2e6 #fff;
					font-weight: 600;

	}


	/* Contenedor principal para el contenido */
		.content-container {
				background-color: #fff;
				padding: 2rem;
				border-radius: 8px;
				box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);

	}

		.lesson-info-container {
				margin-bottom: 2rem;

	}

			.lesson-info-container h3 {
					font-size: 1.5rem;
					font-weight: 600;

	}

			.lesson-info-container p {
					font-size: 1rem;
					color: #6c757d;
					line-height: 1.6;

	}

		.main-video-player {
				position: relative;
				width: 100%;
				padding-bottom: 56.25%;
				background-color: #000;
				border-radius: 8px;
				overflow: hidden;
				box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);

	}

		.video-frame,
		.course-image {
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				border: none;

	}


	/* Estilos del acordeón para módulos y lecciones */
		.accordion-item {
				border: none;
				border-bottom: 1px solid #e9ecef;

	}

		.accordion-button {
				background-color: #fff;
				color: #212529;
				font-weight: 600;
				font-size: 1.1em;
				padding: 1rem;

	}

			.accordion-button:not(.collapsed) {
					color: #007bff;
					background-color: #f8f9fa;
					box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.1);

	}

		.accordion-body {
				padding: 0;

	}

		.lesson-item {
				display: flex;
				align-items: center;
				padding: 1rem;
				text-decoration: none;
				color: #495057;
				transition: background-color 0.2s;

	}

			.lesson-item:hover {
					background-color: #f1f1f1;

	}

			.lesson-item.active {
					background-color: #e9ecef;
					font-weight: 500;
					color: #212529;

	}

			.lesson-item.completed {
					color: #28a745;

	}

		.lesson-icon {
				margin-right: 15px;
				font-size: 1.2em;

	}
</style>

<div class="container course-page-container pb-5">
	<div class="course-tabs-header">
		<ul class="nav nav-tabs" id="courseTabs" role="tablist">
			<li class="nav-item" role="presentation">
				<button class="nav-link active" id="presentacion-tab" data-bs-toggle="tab" data-bs-target="#presentacion-tab-pane" type="button" role="tab">Presentación</button>
			</li>
			<li class="nav-item" role="presentation">
				<button class="nav-link" id="contenido-tab" data-bs-toggle="tab" data-bs-target="#contenido-tab-pane" type="button" role="tab">Contenido</button>
			</li>
			<li class="nav-item" role="presentation">
				<button class="nav-link" id="comunidad-tab" data-bs-toggle="tab" data-bs-target="#comunidad-tab-pane" type="button" role="tab">Comunidad</button>
			</li>
			<li class="nav-item" role="presentation">
				<button class="nav-link" id="proyectos-tab" data-bs-toggle="tab" data-bs-target="#proyectos-tab-pane" type="button" role="tab">Actividades</button>
			</li>
		</ul>
	</div>

	<div class="tab-content pb-5" id="courseTabContent">
		<div class="tab-pane fade show active" id="presentacion-tab-pane" role="tabpanel" tabindex="0">
			<div class="row">
				<div class="col-lg-4">
					<div class="main-video-player">
						<img class="course-image" src="@Model.UrlImagen" alt="Imagen de presentación del curso">
					</div>
				</div>
				<div class="col-lg-8">
					<div class="content-container">
						<h2 class="mb-3">@Model.Titulo</h2>
						<p class="text-muted">@Html.Raw(Model.DescripcionLarga)</p>
						<hr />
						<p><strong>Instructor:</strong></p>
						<div class="d-flex align-items-center">
							<span class="text-warning">
								@for (int i = 0; i < Math.Round(Model.Resenas.Any() ? Model.Resenas.Average(r => r.Calificacion) : 0); i++)
								{
									<i class="fas fa-star"></i>
								}
								@for (int i = 0; i < 5 - Math.Round(Model.Resenas.Any() ? Model.Resenas.Average(r => r.Calificacion) : 0); i++)
								{
									<i class="far fa-star"></i>
								}
							</span>
							<span class="ms-2">@(Model.Resenas.Any() ? Model.Resenas.Average(r => r.Calificacion).ToString("F1") : "0") de 5 estrellas (@Model.Resenas.Count() reseñas)</span>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div class="tab-pane fade pb-5" id="contenido-tab-pane" role="tabpanel" tabindex="0">
			<div class="row">
				<div class="col-lg-8">
					<div class="content-container">
						<div class="lesson-info-container">
							<h3 id="lessonTitle">Selecciona una lección para empezar</h3>
							<p class="text-muted" id="lessonContent">Usa la lista de lecciones a continuación para navegar por el contenido del curso.</p>
						</div>
						<div class="main-video-player">
							<iframe class="video-frame d-none" id="mainVideoFrame" src="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
							<img class="course-image" id="mainCourseImage" src="@Model.UrlImagen" alt="Imagen de presentación del curso">
						</div>
					</div>
				</div>

				<div class="col-lg-4">
					<div class="accordion" id="courseAccordion">
						@foreach (var modulo in Model.Modulos)
						{
							<div class="accordion-item">
								<p class="accordion-header" id="heading_@modulo.Id">
									<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse_@modulo.Id" aria-expanded="false" aria-controls="collapse_@modulo.Id">
										@modulo.Titulo
									</button>
								</p>
								<div id="collapse_@modulo.Id" class="accordion-collapse collapse" aria-labelledby="heading_@modulo.Id" data-bs-parent="#courseAccordion">
									<div class="accordion-body">
										<ul class="list-group list-group-flush">
											@foreach (var leccion in modulo.Lecciones)
											{
												<li class="list-group-item">
													<a href="#" class="lesson-item @(leccion.CompletadaPorEstudiante ? "completed" : "")"
																				   data-video-url="@leccion.UrlVideo"
																				   data-lesson-id="@leccion.Id"
																				   data-lesson-title="@leccion.Titulo"
																				   data-lesson-content="@leccion.Contenido">
														<i class="lesson-icon @(leccion.CompletadaPorEstudiante ? "fas fa-check-circle" : "fas fa-play-circle")"></i>
														<span class="lesson-title">@leccion.Titulo</span>
													</a>
												</li>
											}
										</ul>
									</div>
								</div>
							</div>
						}
					</div>
				</div>
			</div>
		</div>

		<div class="tab-pane fade pb-5" id="comunidad-tab-pane" role="tabpanel" tabindex="0">
			<div class="single-column-layout">
				<div class="content-container">
					<h3>Comunidad y Anuncios</h3>
				</div>
			</div>
		</div>

		<div class="tab-pane fade pb-5" id="proyectos-tab-pane" role="tabpanel" tabindex="0">
			<div class="single-column-layout">
				<div class="content-container">
					<h3>Proyectos de Estudiantes</h3>
				</div>
			</div>
		</div>
	</div>
</div>

@section Scripts {
	<script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
	<script>
		document.addEventListener('DOMContentLoaded', function() {
			const mainVideoFrame = document.getElementById('mainVideoFrame');
			const mainCourseImage = document.getElementById('mainCourseImage');
			const lessonTitleEl = document.getElementById('lessonTitle');
			const lessonContentEl = document.getElementById('lessonContent');
			const progresoEndpoint = '@Url.Action("MarcarLeccionComoCompletada", "Curso")';

			// Función para actualizar la vista de la lección
			function updateLessonView(lessonLink) {
				// Eliminar la clase 'active' de todas las lecciones y añadirla a la seleccionada
				document.querySelectorAll('.lesson-item').forEach(l => l.classList.remove('active'));
				lessonLink.classList.add('active');

				// Obtener los datos de la lección del dataset del enlace
				const videoUrl = lessonLink.dataset.videoUrl;
				const lessonId = lessonLink.dataset.lessonId;
				const lessonTitle = lessonLink.dataset.lessonTitle;
				const lessonContent = lessonLink.dataset.lessonContent;

				// Ocultar la imagen y mostrar el reproductor de video
				mainCourseImage.classList.add('d-none');
				mainVideoFrame.classList.remove('d-none');

				// Actualizar el video
				const videoId = videoUrl.split('/').pop().split('?')[0];
				const embedUrl = `https://www.youtube.com/embed/${videoId}`;
				mainVideoFrame.src = embedUrl;

				// Actualizar el contenido de la lección
				lessonTitleEl.textContent = lessonTitle;
				lessonContentEl.innerHTML = lessonContent;

				// Llamada a la API para marcar como completada
				if (lessonId && !lessonLink.classList.contains('completed')) {
					fetch(`${progresoEndpoint}?leccionId=${lessonId}`, {
						method: 'POST',
						headers: { 'Content-Type': 'application/json', 'X-Requested-With': 'XMLHttpRequest' }
					})
					.then(response => response.json())
					.then(data => {
						if (data.success) {
							console.log('Lección marcada como completada con éxito.');
							lessonLink.classList.add('completed');
							const icon = lessonLink.querySelector('.lesson-icon');
							if (icon) {
								icon.classList.remove('fa-play-circle');
								icon.classList.add('fa-check-circle');
							}
						} else {
							console.error('Error al marcar la lección:', data.message);
						}
					})
					.catch(error => console.error('Hubo un error en la solicitud:', error));
				}
			}

			// Delegación de eventos para manejar clics en las lecciones
			document.getElementById('courseAccordion').addEventListener('click', function(e) {
				const lessonLink = e.target.closest('.lesson-item');
				if (!lessonLink) return;
				e.preventDefault();
				updateLessonView(lessonLink);
			});

			// Lógica para el cambio de tabs (mantener el estado inicial)
			const contenidoTabButton = document.getElementById('contenido-tab');
			contenidoTabButton.addEventListener('shown.bs.tab', function () {
				// No se necesita ninguna acción predeterminada al mostrar el tab,
				// el usuario debe seleccionar la lección.
			});
		});
	</script>
}